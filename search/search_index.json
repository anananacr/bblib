{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to the beambusters library documentation!"},{"location":"reference/","title":"About bblib","text":"<p>The beambusters library (bblib) is a library that contains methods to determine the detector center directly from still diffraction patterns collected in serial crystallography experiments.</p> <p> Python 3.10</p>"},{"location":"reference/methods/","title":"Methods","text":""},{"location":"reference/methods/#bblib.methods.CenteringMethod","title":"<code>CenteringMethod</code>","text":"<p>               Bases: <code>ABC</code></p> <p>This class defines the structure of a centering method used to determine the center of diffraction patterns.</p> Source code in <code>bblib/methods.py</code> <pre><code>class CenteringMethod(ABC):\n    \"\"\"\n    This class defines the structure of a centering method used to determine the center of diffraction patterns.\n\n    \"\"\"\n    @abstractmethod\n    def __init__(self, **kwargs) -&gt; None: ...\n\n    @abstractmethod\n    def _prep_for_centering(self, **kwargs) -&gt; None: ...\n\n    @abstractmethod\n    def _run_centering(self) -&gt; tuple: ...\n\n    def __call__(self, **kwargs) -&gt; tuple:\n        self._prep_for_centering(**kwargs)\n        return self._run_centering()\n\n    def centering_converged(self, center) -&gt; bool:\n        if center == [-1, -1]:\n            return False\n        else:\n            return True\n</code></pre>"},{"location":"reference/methods/#bblib.methods.CenterOfMass","title":"<code>CenterOfMass</code>","text":"<p>               Bases: <code>CenteringMethod</code></p> <p>This class determine the center of a diffraction pattern by calculating the center of mass of the image.</p> Source code in <code>bblib/methods.py</code> <pre><code>class CenterOfMass(CenteringMethod):\n    \"\"\"\n    This class determine the center of a diffraction pattern by calculating the center of mass of the image.\n\n    \"\"\"\n    def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n        \"\"\"\n        This method initializes the CenterOfMass centering method.\n\n        Args:\n            config (dict): A configuration dictionary in a format expected by beambusters.\n            PF8Config (PF8Info): Peakfinder8 parameters.\n            plots_info (dict): Configuration parameters to generate plots.\n        \"\"\"\n\n        self.config = config\n        self.PF8Config = PF8Config\n        self.plots_info = plots_info\n\n        if config[\"plots_flag\"] and not plots_info:\n            raise ValueError(\n                \"From config you want to save plots, please indicate the information to save the plots.\"\n            )\n\n        # Creates an empty plots_info dictionary.\n        if not config[\"plots_flag\"] and not plots_info:\n            plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n\n    def _prep_for_centering(self, data: np.ndarray):\n\n        self.initial_detector_center = self.PF8Config.get_detector_center()\n\n        # Determine Bragg peaks position.\n        pf8 = PF8(self.PF8Config)\n        peak_list = pf8.get_peaks_pf8(data=data)\n        peak_list_x_in_frame, peak_list_y_in_frame = pf8.peak_list_in_slab(peak_list)\n        row_indexes = np.zeros(peak_list[\"num_peaks\"], dtype=int)\n        col_indexes = np.zeros(peak_list[\"num_peaks\"], dtype=int)\n\n        # Calculate the peaks index in the data array.\n        for idx, k in enumerate(peak_list_y_in_frame):\n            row_peak = int(k + self.initial_detector_center[1])\n            col_peak = int(peak_list_x_in_frame[idx] + self.initial_detector_center[0])\n            row_indexes[idx] = row_peak\n            col_indexes[idx] = col_peak\n        peaks_indexes = (row_indexes, col_indexes)\n\n        # Assemble data and mask\n        data_visualize = geometry.DataVisualizer(pixel_maps=self.PF8Config.pixel_maps)\n\n        with h5py.File(f\"{self.PF8Config.bad_pixel_map_filename}\", \"r\") as f:\n            mask = np.array(f[f\"{self.PF8Config.bad_pixel_map_hdf5_path}\"])\n\n        if (\n            self.PF8Config.pf8_detector_info[\"nasics_x\"]\n            * self.PF8Config.pf8_detector_info[\"nasics_y\"]\n            &gt; 1\n        ):\n            self.visual_data = data_visualize.visualize_data(data=data)\n            visual_mask = data_visualize.visualize_data(data=mask).astype(int)\n        else:\n\n            self.visual_data = visualize_single_panel(\n                data, self.PF8Config.transformation_matrix, self.PF8Config.ss_in_rows\n            )\n            visual_mask = visualize_single_panel(\n                mask, self.PF8Config.transformation_matrix, self.PF8Config.ss_in_rows\n            )\n\n        # JF for safety\n        visual_mask[np.where(self.visual_data &lt; 0)] = 0\n\n        # Mask Bragg peaks\n        peaks_mask = mask_peaks(\n            visual_mask,\n            peaks_indexes,\n            bragg=self.config[\"bragg_peaks_positions_for_center_of_mass_calculation\"],\n            n=self.config[\"pixels_for_mask_of_bragg_peaks\"],\n        )\n        self.mask_for_center_of_mass = peaks_mask * visual_mask\n\n    def _run_centering(self) -&gt; tuple:\n\n        center = center_of_mass(self.visual_data, self.mask_for_center_of_mass)\n        if self.centering_converged(center):\n            center[0] += self.config[\"offset\"][\"x\"]\n            center[1] += self.config[\"offset\"][\"y\"]\n\n        if self.config[\"plots_flag\"]:\n            visual_img = self.visual_data * self.mask_for_center_of_mass\n            fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\n            if self.plots_info[\"value_auto\"]:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    visual_img, norm=LogNorm(), cmap=color_map, origin=\"lower\"\n                )\n            else:\n\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    visual_img,\n                    norm=LogNorm(\n                        self.plots_info[\"value_min\"], self.plots_info[\"value_max\"]\n                    ),\n                    cmap=color_map,\n                    origin=\"lower\",\n                )\n            ax1.scatter(\n                self.initial_detector_center[0],\n                self.initial_detector_center[1],\n                s=self.plots_info[\"marker_size\"],\n                color=\"blue\",\n                marker=\"o\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                label=f\"Initial detector center: ({np.round(self.initial_detector_center[0])}, {np.round(self.initial_detector_center[1])})\",\n            )\n            ax1.scatter(\n                center[0],\n                center[1],\n                s=self.plots_info[\"marker_size\"],\n                color=\"r\",\n                marker=\"^\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                label=f\"Refined detector center: ({center[0]}, {center[1]})\",\n            )\n            ax1.legend(fontsize=14, loc=1, markerscale=1)\n            plt.tick_params(axis=\"both\", which=\"major\", labelsize=16)\n            ax1.set_xlabel(\"x (pixel)\", fontsize=20)\n            ax1.set_ylabel(\"y (pixel)\", fontsize=20)\n\n            cbar = fig.colorbar(pos, ax=ax1, shrink=0.6)\n            cbar.ax.tick_params(labelsize=20)\n\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/center_of_mass/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n            if not self.plots_info[\"axis_lim_auto\"]:\n                ax1.set_xlim(self.plots_info[\"xlim_min\"], self.plots_info[\"xlim_max\"])\n                ax1.set_ylim(self.plots_info[\"ylim_min\"], self.plots_info[\"ylim_max\"])\n            plt.savefig(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/center_of_mass/{self.plots_info[\"filename\"]}.png'\n            )\n            plt.close()\n        return np.round(center, 0)\n</code></pre>"},{"location":"reference/methods/#bblib.methods.CenterOfMass.__init__","title":"<code>__init__(config, PF8Config, plots_info=None)</code>","text":"<p>This method initializes the CenterOfMass centering method.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>A configuration dictionary in a format expected by beambusters.</p> required <code>PF8Config</code> <code>PF8Info</code> <p>Peakfinder8 parameters.</p> required <code>plots_info</code> <code>dict</code> <p>Configuration parameters to generate plots.</p> <code>None</code> Source code in <code>bblib/methods.py</code> <pre><code>def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n    \"\"\"\n    This method initializes the CenterOfMass centering method.\n\n    Args:\n        config (dict): A configuration dictionary in a format expected by beambusters.\n        PF8Config (PF8Info): Peakfinder8 parameters.\n        plots_info (dict): Configuration parameters to generate plots.\n    \"\"\"\n\n    self.config = config\n    self.PF8Config = PF8Config\n    self.plots_info = plots_info\n\n    if config[\"plots_flag\"] and not plots_info:\n        raise ValueError(\n            \"From config you want to save plots, please indicate the information to save the plots.\"\n        )\n\n    # Creates an empty plots_info dictionary.\n    if not config[\"plots_flag\"] and not plots_info:\n        plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n</code></pre>"},{"location":"reference/methods/#bblib.methods.CircleDetection","title":"<code>CircleDetection</code>","text":"<p>               Bases: <code>CenteringMethod</code></p> <p>This class determines the center of a diffraction pattern as the center of a circle contained in the image.</p> Source code in <code>bblib/methods.py</code> <pre><code>class CircleDetection(CenteringMethod):\n    \"\"\"\n    This class determines the center of a diffraction pattern as the center of a circle contained in the image.\n    \"\"\"\n    def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n        \"\"\"\n        This method initializes the CircleDetection centering method.\n\n        Args:\n            config (dict): A configuration dictionary in a format expected by beambusters.\n            PF8Config (PF8Info): Peakfinder8 parameters.\n            plots_info (dict): Configuration parameters to generate plots.\n        \"\"\"\n        self.config = config\n        self.PF8Config = PF8Config\n        self.plots_info = plots_info\n        if config[\"plots_flag\"] and not plots_info:\n            raise ValueError(\n                \"From config you want to save plots, please indicate the information to save the plots.\"\n            )\n\n        if not config[\"plots_flag\"] and not plots_info:\n            plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n\n    def _prep_for_centering(self, data: np.ndarray) -&gt; None:\n        self.initial_detector_center = self.PF8Config.get_detector_center()\n        ## Find peaks\n        pf8 = PF8(self.PF8Config)\n        peak_list = pf8.get_peaks_pf8(data=data)\n        peak_list_x_in_frame, peak_list_y_in_frame = pf8.peak_list_in_slab(peak_list)\n        row_indexes = np.zeros(peak_list[\"num_peaks\"], dtype=int)\n        col_indexes = np.zeros(peak_list[\"num_peaks\"], dtype=int)\n\n        for idx, k in enumerate(peak_list_y_in_frame):\n            row_peak = int(k + self.initial_detector_center[1])\n            col_peak = int(peak_list_x_in_frame[idx] + self.initial_detector_center[0])\n            row_indexes[idx] = row_peak\n            col_indexes[idx] = col_peak\n        peaks_indexes = (row_indexes, col_indexes)\n\n        # Assemble data and mask\n        data_visualize = geometry.DataVisualizer(pixel_maps=self.PF8Config.pixel_maps)\n\n        with h5py.File(f\"{self.PF8Config.bad_pixel_map_filename}\", \"r\") as f:\n            mask = np.array(f[f\"{self.PF8Config.bad_pixel_map_hdf5_path}\"])\n\n        if (\n            self.PF8Config.pf8_detector_info[\"nasics_x\"]\n            * self.PF8Config.pf8_detector_info[\"nasics_y\"]\n            &gt; 1\n        ):\n            self.visual_data = data_visualize.visualize_data(data=data)\n            visual_mask = data_visualize.visualize_data(data=mask).astype(int)\n        else:\n\n            self.visual_data = visualize_single_panel(\n                data, self.PF8Config.transformation_matrix, self.PF8Config.ss_in_rows\n            )\n            visual_mask = visualize_single_panel(\n                mask, self.PF8Config.transformation_matrix, self.PF8Config.ss_in_rows\n            )\n\n        # JF for safety\n        visual_mask[np.where(self.visual_data &lt; 0)] = 0\n        only_peaks_mask = mask_peaks(\n            visual_mask,\n            peaks_indexes,\n            bragg=0,\n            n=self.config[\"pixels_for_mask_of_bragg_peaks\"],\n        )\n        self.mask_for_circle_detection = only_peaks_mask * visual_mask\n\n    def _run_centering(self, **kwargs) -&gt; tuple:\n        ## Scikit-image circle detection\n        edges = canny(\n            self.visual_data,\n            mask=self.mask_for_circle_detection,\n            sigma=self.config[\"canny\"][\"sigma\"],\n            use_quantiles=True,\n            low_threshold=self.config[\"canny\"][\"low_threshold\"],\n            high_threshold=self.config[\"canny\"][\"high_threshold\"],\n        )\n\n        if self.config[\"plots_flag\"]:\n            fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\n            color_map = copy.copy(matplotlib.colormaps[self.plots_info[\"color_map\"]])\n            color_map.set_bad(color_map(0))\n            pos = ax1.imshow(edges, origin=\"lower\", cmap=color_map)\n            plt.tick_params(axis=\"both\", which=\"major\", labelsize=16)\n            ax1.set_xlabel(\"x (pixel)\", fontsize=20)\n            ax1.set_ylabel(\"y (pixel)\", fontsize=20)\n            cbar = fig.colorbar(pos, ax=ax1, shrink=0.6)\n            cbar.ax.tick_params(labelsize=20)\n\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/edges/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n            plt.savefig(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/edges/{self.plots_info[\"filename\"]}.png'\n            )\n            plt.close()\n        # Detect radii\n        hough_radii = np.arange(\n            self.config[\"peak_region\"][\"min\"], self.config[\"peak_region\"][\"max\"], 1\n        )\n        hough_res = hough_circle(edges, hough_radii)\n        # Select the most prominent circle given the hough_rank chosen\n        accums, xc, yc, radii = hough_circle_peaks(\n            hough_res, hough_radii, total_num_peaks = int(self.config[\"hough_rank\"])\n        )\n\n        if len(xc) &gt; 0:\n            xc = xc[int(self.config[\"hough_rank\"] - 1)] + self.config[\"offset\"][\"x\"]\n            yc = yc[int(self.config[\"hough_rank\"] - 1)] + self.config[\"offset\"][\"y\"]\n        else:\n            xc = -1\n            yc = -1\n\n        center = [xc, yc]\n        if self.config[\"plots_flag\"]:\n            visual_img = self.visual_data * self.mask_for_circle_detection\n            fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\n            if self.plots_info[\"value_auto\"]:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    visual_img,\n                    norm=LogNorm(),\n                    origin=\"lower\",\n                    cmap=color_map,\n                )\n            else:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    visual_img,\n                    norm=LogNorm(\n                        self.plots_info[\"value_min\"], self.plots_info[\"value_max\"]\n                    ),\n                    origin=\"lower\",\n                    cmap=color_map,\n                )\n            ax1.scatter(\n                self.initial_detector_center[0],\n                self.initial_detector_center[1],\n                s=self.plots_info[\"marker_size\"],\n                color=\"blue\",\n                marker=\"o\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                label=f\"Initial detector center: ({np.round(self.initial_detector_center[0])}, {np.round(self.initial_detector_center[1])})\",\n            )\n            ax1.scatter(\n                center[0],\n                center[1],\n                s=self.plots_info[\"marker_size\"],\n                color=\"r\",\n                marker=\"^\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                label=f\"Refined detector center: ({center[0]}, {center[1]})\",\n            )\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/center_circle_detection/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n            ax1.legend(fontsize=14, loc=1, markerscale=1)\n            cbar = fig.colorbar(pos, ax=ax1, shrink=0.6)\n            cbar.ax.tick_params(labelsize=20)\n            plt.tick_params(axis=\"both\", which=\"major\", labelsize=16)\n            ax1.set_xlabel(\"x (pixel)\", fontsize=20)\n            ax1.set_ylabel(\"y (pixel)\", fontsize=20)\n\n            if not self.plots_info[\"axis_lim_auto\"]:\n                ax1.set_xlim(self.plots_info[\"xlim_min\"], self.plots_info[\"xlim_max\"])\n                ax1.set_ylim(self.plots_info[\"ylim_min\"], self.plots_info[\"ylim_max\"])\n            plt.savefig(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/center_circle_detection/{self.plots_info[\"filename\"]}.png'\n            )\n            plt.close()\n        return center\n</code></pre>"},{"location":"reference/methods/#bblib.methods.CircleDetection.__init__","title":"<code>__init__(config, PF8Config, plots_info=None)</code>","text":"<p>This method initializes the CircleDetection centering method.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>A configuration dictionary in a format expected by beambusters.</p> required <code>PF8Config</code> <code>PF8Info</code> <p>Peakfinder8 parameters.</p> required <code>plots_info</code> <code>dict</code> <p>Configuration parameters to generate plots.</p> <code>None</code> Source code in <code>bblib/methods.py</code> <pre><code>def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n    \"\"\"\n    This method initializes the CircleDetection centering method.\n\n    Args:\n        config (dict): A configuration dictionary in a format expected by beambusters.\n        PF8Config (PF8Info): Peakfinder8 parameters.\n        plots_info (dict): Configuration parameters to generate plots.\n    \"\"\"\n    self.config = config\n    self.PF8Config = PF8Config\n    self.plots_info = plots_info\n    if config[\"plots_flag\"] and not plots_info:\n        raise ValueError(\n            \"From config you want to save plots, please indicate the information to save the plots.\"\n        )\n\n    if not config[\"plots_flag\"] and not plots_info:\n        plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n</code></pre>"},{"location":"reference/methods/#bblib.methods.MinimizePeakFWHM","title":"<code>MinimizePeakFWHM</code>","text":"<p>               Bases: <code>CenteringMethod</code></p> <p>This class determines the center of a diffraction pattern by minimizing the FWHM of a Gaussian curve fitted to an interval in the azimuthal integration.</p> Source code in <code>bblib/methods.py</code> <pre><code>class MinimizePeakFWHM(CenteringMethod):\n    \"\"\"\n    This class determines the center of a diffraction pattern by minimizing the FWHM of a Gaussian curve fitted to an interval in the azimuthal integration.\n    \"\"\"\n\n    def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n        \"\"\"\n        This method initializes the MinimizePeakFWHM centering method.\n\n        Args:\n            config (dict): A configuration dictionary in a format expected by beambusters.\n            PF8Config (PF8Info): Peakfinder8 parameters.\n            plots_info (dict): Configuration parameters to generate plots.\n        \"\"\"\n        self.config = config\n        self.PF8Config = PF8Config\n        self.plots_info = plots_info\n        self.plot_fwhm_flag = False\n        if config[\"plots_flag\"] and not plots_info:\n            raise ValueError(\n                \"From config you want to save plots, please indicate the information to save the plots.\"\n            )\n\n        if not config[\"plots_flag\"] and not plots_info:\n            plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n\n    def _calculate_fwhm(self, coordinate: tuple) -&gt; dict:\n        center_to_radial_average = coordinate\n        try:\n            x_all, y_all = azimuthal_average(\n                self.visual_data,\n                center=center_to_radial_average,\n                mask=self.mask_for_fwhm_min,\n            )\n        except IndexError:\n            return {\n                \"xc\": center_to_radial_average[0],\n                \"yc\": center_to_radial_average[1],\n                \"fwhm\": 10000,\n                \"r_squared\": 0,\n            }\n\n        if self.plot_fwhm_flag:\n            fig, ax1 = plt.subplots(1, 1, figsize=(8, 8))\n            plt.plot(x_all, y_all)\n            ax1.set_xlabel(\"Radial distance (pixel)\", fontsize=20)\n            ax1.set_ylabel(\"Intensity (ADU)\", fontsize=20)\n            plt.tick_params(axis=\"both\", which=\"major\", labelsize=16)\n\n        ## Define background peak region\n        x_min = self.config[\"peak_region\"][\"min\"]\n        x_max = self.config[\"peak_region\"][\"max\"]\n        x = x_all[x_min:x_max]\n        y = y_all[x_min:x_max]\n        ## Estimation of initial parameters\n\n        m0 = 0\n        n0 = 2\n        y_linear = m0 * x + n0\n        y_gaussian = y - y_linear\n\n        try:\n            mean = sum(x * y_gaussian) / sum(y_gaussian)\n            sigma = np.sqrt(sum(y_gaussian * (x - mean) ** 2) / sum(y_gaussian))\n            popt, pcov = curve_fit(\n                gaussian_lin, x, y, p0=[max(y_gaussian), mean, sigma, m0, n0]\n            )\n            fwhm = popt[2] * math.sqrt(8 * np.log(2))\n            ## Divide by radius of the peak to get shasrpness ratio\n            fwhm_over_radius = fwhm / popt[1]\n\n            ##Calculate residues\n            residuals = y - gaussian_lin(x, *popt)\n            ss_res = np.sum(residuals**2)\n            ss_tot = np.sum((y - np.mean(y)) ** 2)\n            r_squared = 1 - (ss_res / ss_tot)\n        except (ZeroDivisionError, RuntimeError):\n            r_squared = 0\n            fwhm = 10000\n            popt = []\n\n        ## Display plots\n        if self.plot_fwhm_flag and len(popt) &gt; 0:\n            x_fit = x.copy()\n            y_fit = gaussian_lin(x_fit, *popt)\n\n            plt.vlines([x[0], x[-1]], 0, round(popt[0]) * 10, \"r\")\n\n            plt.plot(\n                x_fit,\n                y_fit,\n                \"r--\",\n                label=f\"gaussian fit \\n a:{round(popt[0],2)} \\n x0:{round(popt[1],2)} \\n sigma:{round(popt[2],2)} \\n R\u00b2 {round(r_squared, 4)}\\n FWHM : {round(fwhm,3)}\",\n            )\n\n            plt.legend(fontsize=14, loc=1, markerscale=1)\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/radial_average/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n            plt.savefig(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/radial_average/{self.plots_info[\"filename\"]}.png'\n            )\n            plt.close()\n\n        return {\n            \"xc\": center_to_radial_average[0],\n            \"yc\": center_to_radial_average[1],\n            \"fwhm\": fwhm,\n            \"r_squared\": r_squared,\n        }\n\n    def _prep_for_centering(self, data: np.ndarray, initial_guess: tuple) -&gt; None:\n        self.initial_guess = initial_guess\n        self.initial_detector_center = self.PF8Config.get_detector_center()\n        non_shifted_pixel_maps_for_visualization = self.PF8Config.pixel_maps.copy()\n        ## Find peaks\n        self.PF8Config.update_pixel_maps(\n            initial_guess[0] - self.initial_detector_center[0],\n            initial_guess[1] - self.initial_detector_center[1],\n        )\n        pf8 = PF8(self.PF8Config)\n        # Assemble data and mask\n        data_visualize = geometry.DataVisualizer(\n            pixel_maps=non_shifted_pixel_maps_for_visualization\n        )\n\n        with h5py.File(f\"{self.PF8Config.bad_pixel_map_filename}\", \"r\") as f:\n            mask = np.array(f[f\"{self.PF8Config.bad_pixel_map_hdf5_path}\"])\n\n        if not self.config[\"polarization\"][\"apply_polarization_correction\"]:\n            peak_list = pf8.get_peaks_pf8(data=data)\n            if (\n                self.PF8Config.pf8_detector_info[\"nasics_x\"]\n                * self.PF8Config.pf8_detector_info[\"nasics_y\"]\n                &gt; 1\n            ):\n                self.visual_data = data_visualize.visualize_data(data=data)\n                visual_mask = data_visualize.visualize_data(data=mask).astype(int)\n            else:\n                self.visual_data = visualize_single_panel(\n                    data,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n                visual_mask = visualize_single_panel(\n                    mask,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n        else:\n            pol_corrected_data, pol_array_map = correct_polarization(\n                self.PF8Config.pixel_maps[\"x\"],\n                self.PF8Config.pixel_maps[\"y\"],\n                float(\n                    np.mean(self.PF8Config.pixel_maps[\"z\"])\n                    * self.PF8Config.pixel_resolution\n                ),\n                data,\n                mask=mask,\n                polarization_axis=self.config[\"polarization\"][\"axis\"],\n                p=self.config[\"polarization\"][\"value\"],\n            )\n            peak_list = pf8.get_peaks_pf8(data=pol_corrected_data)\n            if (\n                self.PF8Config.pf8_detector_info[\"nasics_x\"]\n                * self.PF8Config.pf8_detector_info[\"nasics_y\"]\n                &gt; 1\n            ):\n                self.visual_data = data_visualize.visualize_data(\n                    data=pol_corrected_data\n                )\n                visual_mask = data_visualize.visualize_data(data=mask).astype(int)\n            else:\n                self.visual_data = visualize_single_panel(\n                    pol_corrected_data,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n                visual_mask = visualize_single_panel(\n                    mask,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n\n        peak_list_x_in_frame, peak_list_y_in_frame = pf8.peak_list_in_slab(peak_list)\n        row_indexes = np.zeros(peak_list[\"num_peaks\"], dtype=int)\n        col_indexes = np.zeros(peak_list[\"num_peaks\"], dtype=int)\n\n        for idx, k in enumerate(peak_list_y_in_frame):\n            row_peak = int(k + self.initial_guess[1])\n            col_peak = int(peak_list_x_in_frame[idx] + self.initial_guess[0])\n            row_indexes[idx] = row_peak\n            col_indexes[idx] = col_peak\n        peaks_indexes = (row_indexes, col_indexes)\n\n        # JF for safety\n        visual_mask[np.where(self.visual_data &lt; 0)] = 0\n\n        only_peaks_mask = mask_peaks(\n            visual_mask,\n            peaks_indexes,\n            bragg=0,\n            n=self.config[\"pixels_for_mask_of_bragg_peaks\"],\n        )\n        self.mask_for_fwhm_min = only_peaks_mask * visual_mask\n\n        self.pixel_step = 1\n        xx, yy = np.meshgrid(\n            np.arange(\n                self.initial_guess[0] - 20,\n                self.initial_guess[0] + 21,\n                self.pixel_step,\n                dtype=int,\n            ),\n            np.arange(\n                self.initial_guess[1] - 20,\n                self.initial_guess[1] + 21,\n                self.pixel_step,\n                dtype=int,\n            ),\n        )\n        coordinates = np.column_stack((np.ravel(xx), np.ravel(yy)))\n\n        pool = multiprocessing.Pool()\n        with pool:\n            self.fwhm_summary = pool.map(self._calculate_fwhm, coordinates)\n\n    def _run_centering(self, **kwargs) -&gt; tuple:\n        if self.config[\"plots_flag\"]:\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/fwhm_map/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n\n        xc, yc = get_fwhm_map_global_min(\n            self.fwhm_summary,\n            f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}',\n            f'{self.plots_info[\"filename\"]}',\n            self.pixel_step,\n            self.config[\"plots_flag\"],\n        )\n\n        xc += self.config[\"offset\"][\"x\"]\n        yc += self.config[\"offset\"][\"y\"]\n        center = [xc, yc]\n\n        if self.centering_converged(center):\n            self.plot_fwhm_flag = True\n            self._calculate_fwhm(center)\n            self.plot_fwhm_flag = False\n\n        if self.config[\"plots_flag\"]:\n            visual_img = self.visual_data * self.mask_for_fwhm_min\n            fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\n            if self.plots_info[\"value_auto\"]:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    visual_img,\n                    norm=LogNorm(),\n                    origin=\"lower\",\n                    cmap=color_map,\n                )\n            else:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    visual_img,\n                    norm=LogNorm(\n                        self.plots_info[\"value_min\"], self.plots_info[\"value_max\"]\n                    ),\n                    origin=\"lower\",\n                    cmap=color_map,\n                )\n\n            ax1.scatter(\n                self.initial_guess[0],\n                self.initial_guess[1],\n                s=self.plots_info[\"marker_size\"],\n                color=\"blue\",\n                marker=\"o\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                label=f\"Initial guess: ({np.round(self.initial_guess[0])}, {np.round(self.initial_guess[1])})\",\n            )\n            ax1.scatter(\n                center[0],\n                center[1],\n                s=self.plots_info[\"marker_size\"],\n                color=\"r\",\n                marker=\"^\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                label=f\"Refined detector center: ({center[0]}, {center[1]})\",\n            )\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/center_fwhm_minimization/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n            ax1.legend(fontsize=14, loc=1, markerscale=1)\n            plt.tick_params(axis=\"both\", which=\"major\", labelsize=16)\n            ax1.set_xlabel(\"x (pixel)\", fontsize=20)\n            ax1.set_ylabel(\"y (pixel)\", fontsize=20)\n\n            cbar = fig.colorbar(pos, ax=ax1, shrink=0.6)\n            cbar.ax.tick_params(labelsize=20)\n\n            if not self.plots_info[\"axis_lim_auto\"]:\n                ax1.set_xlim(self.plots_info[\"xlim_min\"], self.plots_info[\"xlim_max\"])\n                ax1.set_ylim(self.plots_info[\"ylim_min\"], self.plots_info[\"ylim_max\"])\n            plt.savefig(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/center_fwhm_minimization/{self.plots_info[\"filename\"]}.png'\n            )\n            plt.close()\n\n        return center\n</code></pre>"},{"location":"reference/methods/#bblib.methods.MinimizePeakFWHM.__init__","title":"<code>__init__(config, PF8Config, plots_info=None)</code>","text":"<p>This method initializes the MinimizePeakFWHM centering method.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>A configuration dictionary in a format expected by beambusters.</p> required <code>PF8Config</code> <code>PF8Info</code> <p>Peakfinder8 parameters.</p> required <code>plots_info</code> <code>dict</code> <p>Configuration parameters to generate plots.</p> <code>None</code> Source code in <code>bblib/methods.py</code> <pre><code>def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n    \"\"\"\n    This method initializes the MinimizePeakFWHM centering method.\n\n    Args:\n        config (dict): A configuration dictionary in a format expected by beambusters.\n        PF8Config (PF8Info): Peakfinder8 parameters.\n        plots_info (dict): Configuration parameters to generate plots.\n    \"\"\"\n    self.config = config\n    self.PF8Config = PF8Config\n    self.plots_info = plots_info\n    self.plot_fwhm_flag = False\n    if config[\"plots_flag\"] and not plots_info:\n        raise ValueError(\n            \"From config you want to save plots, please indicate the information to save the plots.\"\n        )\n\n    if not config[\"plots_flag\"] and not plots_info:\n        plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n</code></pre>"},{"location":"reference/methods/#bblib.methods.FriedelPairs","title":"<code>FriedelPairs</code>","text":"<p>               Bases: <code>CenteringMethod</code></p> <p>This class determines the center of a diffraction pattern through the selection of Friedel pairs candidates and matching of their coordinates.</p> Source code in <code>bblib/methods.py</code> <pre><code>class FriedelPairs(CenteringMethod):\n    \"\"\"\n    This class determines the center of a diffraction pattern through the selection of Friedel pairs candidates and matching of their coordinates.\n    \"\"\"\n\n    def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n        \"\"\"\n        This method initializes the FriedelPairs centering method.\n\n        Args:\n            config (dict): A configuration dictionary in a format expected by beambusters.\n            PF8Config (PF8Info): Peakfinder8 parameters.\n            plots_info (dict): Configuration parameters to generate plots.\n        \"\"\"\n        self.config = config\n        self.PF8Config = PF8Config\n        self.plots_info = plots_info\n        if config[\"plots_flag\"] and not plots_info:\n            raise ValueError(\n                \"From config you want to save plots, please indicate the information to save the plots.\"\n            )\n\n        if not config[\"plots_flag\"] and not plots_info:\n            plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n\n    def _select_closest_peaks(self, peaks_list: list, inverted_peaks: list) -&gt; list:\n        pairs_list = []\n        for i in peaks_list:\n            radius = 0.1\n            found_peak = False\n            while not found_peak and radius &lt;= self.config[\"search_radius\"]:\n                found_peak = self._find_a_peak_in_the_surrounding(\n                    i, inverted_peaks, radius\n                )\n                radius += 0.1\n            if found_peak:\n                pairs_list.append((i, found_peak))\n        pairs_list = self._check_paired_reflections(pairs_list)\n        return pairs_list\n\n    def _find_a_peak_in_the_surrounding(\n        self, peak: list, inverted_peaks_list: list, radius: float\n    ) -&gt; list:\n        cut_peaks_list = []\n        cut_peaks_list = [\n            (\n                inverted_peak,\n                math.sqrt(\n                    (peak[0] - inverted_peak[0]) ** 2\n                    + (peak[1] - inverted_peak[1]) ** 2\n                ),\n            )\n            for inverted_peak in inverted_peaks_list\n            if math.sqrt(\n                (peak[0] - inverted_peak[0]) ** 2 + (peak[1] - inverted_peak[1]) ** 2\n            )\n            &lt;= radius\n        ]\n        cut_peaks_list.sort(key=lambda x: x[1])\n\n        if cut_peaks_list == []:\n            return False\n        else:\n            return cut_peaks_list[0][0]\n\n    def _check_paired_reflections(self, pairs_list: list) -&gt; list:\n        # Check if the reversed peak is also on the list\n        filtered_pairs = []\n\n        for original_peak, inverted_peak in pairs_list:\n            inverted_peak_inverted_twice = (\n                -1 * inverted_peak[0],\n                -1 * inverted_peak[1],\n            )\n            original_peak_inverted_twice = (\n                -1 * original_peak[0],\n                -1 * original_peak[1],\n            )\n            inverted_pair = (inverted_peak_inverted_twice, original_peak_inverted_twice)\n            if inverted_pair in pairs_list:\n                filtered_pairs.append((original_peak, inverted_peak))\n\n        return filtered_pairs\n\n    def _prep_for_centering(self, data: np.ndarray, initial_guess: tuple) -&gt; None:\n\n        self.initial_guess = initial_guess\n        self.initial_detector_center = self.PF8Config.get_detector_center()\n        non_shifted_pixel_maps_for_visualization = self.PF8Config.pixel_maps.copy()\n\n        # Find Bragg  peaks\n        self.PF8Config.update_pixel_maps(\n            initial_guess[0] - self.initial_detector_center[0],\n            initial_guess[1] - self.initial_detector_center[1],\n        )\n\n        pf8 = PF8(self.PF8Config)\n\n        # Assemble data and mask\n        data_visualize = geometry.DataVisualizer(\n            pixel_maps=non_shifted_pixel_maps_for_visualization\n        )\n\n        with h5py.File(f\"{self.PF8Config.bad_pixel_map_filename}\", \"r\") as f:\n            mask = np.array(f[f\"{self.PF8Config.bad_pixel_map_hdf5_path}\"])\n\n        if not self.config[\"polarization\"][\"apply_polarization_correction\"]:\n            peak_list = pf8.get_peaks_pf8(data=data)\n            if (\n                self.PF8Config.pf8_detector_info[\"nasics_x\"]\n                * self.PF8Config.pf8_detector_info[\"nasics_y\"]\n                &gt; 1\n            ):\n                self.visual_data = data_visualize.visualize_data(data=data)\n                self.visual_mask = data_visualize.visualize_data(data=mask).astype(int)\n            else:\n                self.visual_data = visualize_single_panel(\n                    data,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n                self.visual_mask = visualize_single_panel(\n                    mask,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n        else:\n            pol_corrected_data, pol_array_map = correct_polarization(\n                self.PF8Config.pixel_maps[\"x\"],\n                self.PF8Config.pixel_maps[\"y\"],\n                float(\n                    np.mean(self.PF8Config.pixel_maps[\"z\"])\n                    * self.PF8Config.pixel_resolution\n                ),\n                data,\n                mask=mask,\n                polarization_axis=self.config[\"polarization\"][\"axis\"],\n                p=self.config[\"polarization\"][\"value\"],\n            )\n            peak_list = pf8.get_peaks_pf8(data=pol_corrected_data)\n            if (\n                self.PF8Config.pf8_detector_info[\"nasics_x\"]\n                * self.PF8Config.pf8_detector_info[\"nasics_y\"]\n                &gt; 1\n            ):\n                self.visual_data = data_visualize.visualize_data(\n                    data=pol_corrected_data\n                )\n                self.visual_mask = data_visualize.visualize_data(data=mask).astype(int)\n            else:\n                self.visual_data = visualize_single_panel(\n                    pol_corrected_data,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n                self.visual_mask = visualize_single_panel(\n                    mask,\n                    self.PF8Config.transformation_matrix,\n                    self.PF8Config.ss_in_rows,\n                )\n\n        peak_list_in_slab = pf8.peak_list_in_slab(peak_list)\n        self.peak_list_x_in_frame, self.peak_list_y_in_frame = peak_list_in_slab\n\n    def _run_centering(self, **kwargs) -&gt; tuple:\n\n        peak_list_x_in_frame = self.peak_list_x_in_frame.copy()\n        peak_list_y_in_frame = self.peak_list_y_in_frame.copy()\n\n        peaks = list(zip(peak_list_x_in_frame, peak_list_y_in_frame))\n        inverted_peaks_x = [-1 * k for k in peak_list_x_in_frame]\n        inverted_peaks_y = [-1 * k for k in peak_list_y_in_frame]\n        inverted_peaks = list(zip(inverted_peaks_x, inverted_peaks_y))\n        pairs_list = self._select_closest_peaks(peaks, inverted_peaks)\n\n        # Calculcate the direct beam shift\n\n        self.peaks_list_original = [x for x, y in pairs_list]\n        self.peaks_list_inverted = [y for x, y in pairs_list]\n\n        if len(pairs_list) &gt; 0:\n            print(\n                f\"--------------  Friedel pairs search --------------\\nNumber of Friedel Pairs in frame: {len(pairs_list)/2}\"\n            )\n            print(f\"Pairs list for analysis:\")\n            print(pairs_list)\n\n            friedel_coordinates_in_x = [x for x, y in self.peaks_list_original]\n            friedel_coordinates_in_y = [y for x, y in self.peaks_list_original]\n\n            print(f\"Friedel pairs position before center correction in pixels:\")\n            print(self.peaks_list_original)\n\n            shift_x = sum(friedel_coordinates_in_x) / len(friedel_coordinates_in_x)\n            shift_y = sum(friedel_coordinates_in_y) / len(friedel_coordinates_in_y)\n\n            print(\"Center shift in x\", shift_x)\n            print(\"Center shift in y\", shift_y)\n            center = [\n                np.round(self.initial_guess[0] + shift_x, 1),\n                np.round(self.initial_guess[1] + shift_y, 1),\n            ]\n\n            print(f\"Friedel pairs position after center correction in pixels:\")\n            pairs_list_after_correction = [\n                (np.round(x[0] - shift_x, 1), np.round(x[1] - shift_y, 1))\n                for x in self.peaks_list_original\n            ]\n            print(pairs_list_after_correction)\n            print(f\"All reflections after center correction in pixels:\")\n            peaks_list_after_correction = [\n                (np.round(x[0] - shift_x, 1), np.round(x[1] - shift_y, 1))\n                for x in peaks\n            ]\n            print(peaks_list_after_correction)\n            print(f\"-- End --\")\n\n            center[0] += self.config[\"offset\"][\"x\"]\n            center[1] += self.config[\"offset\"][\"y\"]\n        else:\n            center = [-1, -1]\n\n        if self.config[\"plots_flag\"] and self.centering_converged(center):\n\n            fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\n            if self.plots_info[\"value_auto\"]:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    self.visual_data * self.visual_mask,\n                    norm=LogNorm(),\n                    cmap=color_map,\n                    origin=\"lower\",\n                )\n            else:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    self.visual_data * self.visual_mask,\n                    norm=LogNorm(\n                        self.plots_info[\"value_min\"], self.plots_info[\"value_max\"]\n                    ),\n                    cmap=color_map,\n                    origin=\"lower\",\n                )\n\n            ax1.scatter(\n                self.initial_guess[0],\n                self.initial_guess[1],\n                color=\"b\",\n                marker=\"o\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                s=self.plots_info[\"marker_size\"],\n                label=f\"Initial guess:({np.round(self.initial_guess[0],1)},{np.round(self.initial_guess[1], 1)})\",\n            )\n\n            ax1.scatter(\n                center[0],\n                center[1],\n                color=\"r\",\n                marker=\"^\",\n                edgecolor=\"black\",\n                linewidth=0.5,\n                s=self.plots_info[\"marker_size\"],\n                label=f\"Refined detector center:({np.round(center[0],1)}, {np.round(center[1],1)})\",\n            )\n\n            cbar = fig.colorbar(pos, ax=ax1, shrink=0.6)\n            cbar.ax.tick_params(labelsize=20)\n            ax1.legend(fontsize=14, loc=1, markerscale=1)\n            plt.tick_params(axis=\"both\", which=\"major\", labelsize=16)\n            ax1.set_xlabel(\"x (pixel)\", fontsize=20)\n            ax1.set_ylabel(\"y (pixel)\", fontsize=20)\n\n            if not self.plots_info[\"axis_lim_auto\"]:\n                ax1.set_xlim(self.plots_info[\"xlim_min\"], self.plots_info[\"xlim_max\"])\n                ax1.set_ylim(self.plots_info[\"ylim_min\"], self.plots_info[\"ylim_max\"])\n\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/centered_friedel/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n            plt.savefig(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/centered_friedel/{self.plots_info[\"filename\"]}.png'\n            )\n            plt.close(\"all\")\n\n            original_peaks_x = [\n                np.round(k + self.initial_guess[0]) for k in peak_list_x_in_frame\n            ]\n            original_peaks_y = [\n                np.round(k + self.initial_guess[1]) for k in peak_list_y_in_frame\n            ]\n\n            inverted_non_shifted_peaks_x = [\n                np.round(k[0] + self.initial_guess[0]) for k in self.peaks_list_inverted\n            ]\n            inverted_non_shifted_peaks_y = [\n                np.round(k[1] + self.initial_guess[1]) for k in self.peaks_list_inverted\n            ]\n            inverted_shifted_peaks_x = [\n                np.round(k[0] + self.initial_guess[0] + shift_x)\n                for k in self.peaks_list_inverted\n            ]\n            inverted_shifted_peaks_y = [\n                np.round(k[1] + self.initial_guess[1] + shift_y)\n                for k in self.peaks_list_inverted\n            ]\n\n            # Check pairs alignement\n            fig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\n            if self.plots_info[\"value_auto\"]:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    self.visual_data * self.visual_mask,\n                    norm=LogNorm(),\n                    cmap=color_map,\n                    origin=\"lower\",\n                )\n            else:\n                color_map = copy.copy(\n                    matplotlib.colormaps[self.plots_info[\"color_map\"]]\n                )\n                color_map.set_bad(color_map(0))\n                pos = ax1.imshow(\n                    self.visual_data * self.visual_mask,\n                    norm=LogNorm(\n                        self.plots_info[\"value_min\"], self.plots_info[\"value_max\"]\n                    ),\n                    cmap=color_map,\n                    origin=\"lower\",\n                )\n\n            ax1.scatter(\n                original_peaks_x,\n                original_peaks_y,\n                facecolor=\"none\",\n                s=0.8 * self.plots_info[\"marker_size\"],\n                marker=\"o\",\n                edgecolor=\"red\",\n                linewidth=1.8,\n                label=\"original peaks\",\n            )\n\n            ax1.scatter(\n                inverted_non_shifted_peaks_x,\n                inverted_non_shifted_peaks_y,\n                s=1.2 * self.plots_info[\"marker_size\"],\n                facecolor=\"none\",\n                marker=\"s\",\n                edgecolor=\"blue\",\n                linewidth=1.8,\n                label=\"inverted peaks\",\n                alpha=1,\n            )\n            ax1.scatter(\n                inverted_shifted_peaks_x,\n                inverted_shifted_peaks_y,\n                facecolor=\"none\",\n                s=1.2 * self.plots_info[\"marker_size\"],\n                marker=\"D\",\n                linewidth=1.8,\n                alpha=1,\n                edgecolor=\"green\",\n                label=\"inverted peaks shifted\",\n            )\n\n            if not self.plots_info[\"axis_lim_auto\"]:\n                ax1.set_xlim(self.plots_info[\"xlim_min\"], self.plots_info[\"xlim_max\"])\n                ax1.set_ylim(self.plots_info[\"ylim_min\"], self.plots_info[\"ylim_max\"])\n\n            cbar = fig.colorbar(pos, ax=ax1, shrink=0.6)\n            cbar.ax.tick_params(labelsize=20)\n            ax1.legend(fontsize=14, loc=1, markerscale=1)\n            plt.tick_params(axis=\"both\", which=\"major\", labelsize=16)\n            ax1.set_xlabel(\"x (pixel)\", fontsize=20)\n            ax1.set_ylabel(\"y (pixel)\", fontsize=20)\n            path = pathlib.Path(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/peaks/'\n            )\n            path.mkdir(parents=True, exist_ok=True)\n            plt.savefig(\n                f'{self.plots_info[\"root_path\"]}/center_refinement/plots/{self.plots_info[\"folder_name\"]}/peaks/{self.plots_info[\"filename\"]}.png'\n            )\n            plt.close()\n        return center\n</code></pre>"},{"location":"reference/methods/#bblib.methods.FriedelPairs.__init__","title":"<code>__init__(config, PF8Config, plots_info=None)</code>","text":"<p>This method initializes the FriedelPairs centering method.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>A configuration dictionary in a format expected by beambusters.</p> required <code>PF8Config</code> <code>PF8Info</code> <p>Peakfinder8 parameters.</p> required <code>plots_info</code> <code>dict</code> <p>Configuration parameters to generate plots.</p> <code>None</code> Source code in <code>bblib/methods.py</code> <pre><code>def __init__(self, config: dict, PF8Config: PF8Info, plots_info: dict = None):\n    \"\"\"\n    This method initializes the FriedelPairs centering method.\n\n    Args:\n        config (dict): A configuration dictionary in a format expected by beambusters.\n        PF8Config (PF8Info): Peakfinder8 parameters.\n        plots_info (dict): Configuration parameters to generate plots.\n    \"\"\"\n    self.config = config\n    self.PF8Config = PF8Config\n    self.plots_info = plots_info\n    if config[\"plots_flag\"] and not plots_info:\n        raise ValueError(\n            \"From config you want to save plots, please indicate the information to save the plots.\"\n        )\n\n    if not config[\"plots_flag\"] and not plots_info:\n        plots_info = {\"filename\": \"\", \"folder_name\": \"\", \"root_path\": \"\"}\n</code></pre>"},{"location":"reference/models/","title":"Models","text":""},{"location":"reference/models/#bblib.models","title":"<code>models</code>","text":"<p>This module import peakfinder8 from the OnDA monitor and add extra features.</p>"},{"location":"reference/models/#bblib.models.PF8","title":"<code>PF8</code>","text":"<p>This class defines an object that determine the Bragg peaks using the peakfinder8 algorithm from OnDA monitor.</p> Source code in <code>bblib/models.py</code> <pre><code>class PF8:\n    \"\"\"\n    This class defines an object that determine the Bragg peaks using the peakfinder8 algorithm from OnDA monitor.\n    \"\"\"\n    def __init__(self, info):\n        \"\"\"\n        This method initilizes the PF8 class.\n\n        Args:\n            info (PF8Info): Peakfinder8 parameters.\n        \"\"\"\n        assert isinstance(\n            info, PF8Info\n        ), f\"Info object expected type PF8Info, found {type(info)}.\"\n        self.pf8_param = info\n\n    def get_peaks_pf8(self, data: np.ndarray):\n        \"\"\"\n        This method determines the Bragg peaks positions using the peakfinder8 algorithm from OnDA monitor.\n\n        Args:\n            data (np.ndarray): Data in which the peakfinder8 will be performed.\n\n        Returns:\n            peak_list (dict): Bragg peaks position in the fast-scan/slow-scan axis, their integrated intensity and maximum intensity\n        \"\"\"\n        self._radius_pixel_map = self.pf8_param.pixel_maps[\"radius\"]\n        self._data_shape: Tuple[int, ...] = self._radius_pixel_map.shape\n        self._flattened_visualization_pixel_map_x = self.pf8_param.pixel_maps[\n            \"x\"\n        ].flatten()\n        self._flattened_visualization_pixel_map_y = self.pf8_param.pixel_maps[\n            \"y\"\n        ].flatten()\n        peak_detection = Peakfinder8PeakDetection(\n            radius_pixel_map=(self.pf8_param.pixel_maps[\"radius\"]).astype(np.float32),\n            layout_info=self.pf8_param.pf8_detector_info,\n            crystallography_parameters=self.pf8_param,\n        )\n        peak_list = peak_detection.find_peaks(data=data)\n        return peak_list\n\n    def peak_list_in_slab(self, peak_list):\n        \"\"\"\n        This method transforms the Bragg peaks positions in the fast-scan/slow-scan axis to Cartesian (x/y) coordinates using the visualization pixel map.\n        Args:\n            peak_list (dict): Bragg peaks list determined by peakfinder8.\n\n        Returns:\n            peaks_coordinates (tuple): Bragg peaks x and y coordinates in the visualization frame.\n\n        \"\"\"\n        peak_list_x_in_frame: List[float] = []\n        peak_list_y_in_frame: List[float] = []\n        peak_fs: float\n        peak_ss: float\n        peak_value: float\n        for peak_fs, peak_ss, peak_value, peak_max_pixel_intensity in zip(\n            peak_list[\"fs\"],\n            peak_list[\"ss\"],\n            peak_list[\"intensity\"],\n            peak_list[\"max_pixel_intensity\"],\n        ):\n            peak_index_in_slab: int = int(round(peak_ss)) * self._data_shape[1] + int(\n                round(peak_fs)\n            )\n            y_in_frame: float = self._flattened_visualization_pixel_map_y[\n                peak_index_in_slab\n            ]\n            x_in_frame: float = self._flattened_visualization_pixel_map_x[\n                peak_index_in_slab\n            ]\n            peak_list_x_in_frame.append(x_in_frame)\n            peak_list_y_in_frame.append(y_in_frame)\n\n        return peak_list_x_in_frame, peak_list_y_in_frame\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8.__init__","title":"<code>__init__(info)</code>","text":"<p>This method initilizes the PF8 class.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>PF8Info</code> <p>Peakfinder8 parameters.</p> required Source code in <code>bblib/models.py</code> <pre><code>def __init__(self, info):\n    \"\"\"\n    This method initilizes the PF8 class.\n\n    Args:\n        info (PF8Info): Peakfinder8 parameters.\n    \"\"\"\n    assert isinstance(\n        info, PF8Info\n    ), f\"Info object expected type PF8Info, found {type(info)}.\"\n    self.pf8_param = info\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8.get_peaks_pf8","title":"<code>get_peaks_pf8(data)</code>","text":"<p>This method determines the Bragg peaks positions using the peakfinder8 algorithm from OnDA monitor.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>Data in which the peakfinder8 will be performed.</p> required <p>Returns:</p> Name Type Description <code>peak_list</code> <code>dict</code> <p>Bragg peaks position in the fast-scan/slow-scan axis, their integrated intensity and maximum intensity</p> Source code in <code>bblib/models.py</code> <pre><code>def get_peaks_pf8(self, data: np.ndarray):\n    \"\"\"\n    This method determines the Bragg peaks positions using the peakfinder8 algorithm from OnDA monitor.\n\n    Args:\n        data (np.ndarray): Data in which the peakfinder8 will be performed.\n\n    Returns:\n        peak_list (dict): Bragg peaks position in the fast-scan/slow-scan axis, their integrated intensity and maximum intensity\n    \"\"\"\n    self._radius_pixel_map = self.pf8_param.pixel_maps[\"radius\"]\n    self._data_shape: Tuple[int, ...] = self._radius_pixel_map.shape\n    self._flattened_visualization_pixel_map_x = self.pf8_param.pixel_maps[\n        \"x\"\n    ].flatten()\n    self._flattened_visualization_pixel_map_y = self.pf8_param.pixel_maps[\n        \"y\"\n    ].flatten()\n    peak_detection = Peakfinder8PeakDetection(\n        radius_pixel_map=(self.pf8_param.pixel_maps[\"radius\"]).astype(np.float32),\n        layout_info=self.pf8_param.pf8_detector_info,\n        crystallography_parameters=self.pf8_param,\n    )\n    peak_list = peak_detection.find_peaks(data=data)\n    return peak_list\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8.peak_list_in_slab","title":"<code>peak_list_in_slab(peak_list)</code>","text":"<p>This method transforms the Bragg peaks positions in the fast-scan/slow-scan axis to Cartesian (x/y) coordinates using the visualization pixel map. Args:     peak_list (dict): Bragg peaks list determined by peakfinder8.</p> <p>Returns:</p> Name Type Description <code>peaks_coordinates</code> <code>tuple</code> <p>Bragg peaks x and y coordinates in the visualization frame.</p> Source code in <code>bblib/models.py</code> <pre><code>def peak_list_in_slab(self, peak_list):\n    \"\"\"\n    This method transforms the Bragg peaks positions in the fast-scan/slow-scan axis to Cartesian (x/y) coordinates using the visualization pixel map.\n    Args:\n        peak_list (dict): Bragg peaks list determined by peakfinder8.\n\n    Returns:\n        peaks_coordinates (tuple): Bragg peaks x and y coordinates in the visualization frame.\n\n    \"\"\"\n    peak_list_x_in_frame: List[float] = []\n    peak_list_y_in_frame: List[float] = []\n    peak_fs: float\n    peak_ss: float\n    peak_value: float\n    for peak_fs, peak_ss, peak_value, peak_max_pixel_intensity in zip(\n        peak_list[\"fs\"],\n        peak_list[\"ss\"],\n        peak_list[\"intensity\"],\n        peak_list[\"max_pixel_intensity\"],\n    ):\n        peak_index_in_slab: int = int(round(peak_ss)) * self._data_shape[1] + int(\n            round(peak_fs)\n        )\n        y_in_frame: float = self._flattened_visualization_pixel_map_y[\n            peak_index_in_slab\n        ]\n        x_in_frame: float = self._flattened_visualization_pixel_map_x[\n            peak_index_in_slab\n        ]\n        peak_list_x_in_frame.append(x_in_frame)\n        peak_list_y_in_frame.append(y_in_frame)\n\n    return peak_list_x_in_frame, peak_list_y_in_frame\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8Info","title":"<code>PF8Info</code>  <code>dataclass</code>","text":"<p>This class defines the configuration parameters for peakfinder8.</p> <p>Attributes:</p> Name Type Description <code>max_num_peaks</code> <code>int32</code> <p>Maximum number of peaks.</p> <code>adc_threshold</code> <code>int32</code> <p>Minimum threshold in arbitrary detector counts (ADC) units.</p> <code>minimum_snr</code> <code>float32</code> <p>Minimum signal-to-noise ration.</p> <code>min_pixel_count</code> <code>int16</code> <p>Minimum number of pixels to consider a Bragg peak.</p> <code>max_pixel_count</code> <code>int16</code> <p>Maximum number of pixels to consider a Bragg peak.</p> <code>local_bg_radius</code> <code>int16</code> <p>Local bakground radius in pixels.</p> <code>min_res</code> <code>int16</code> <p>Minimum resolution ring in pixels.</p> <code>max_res</code> <code>int16</code> <p>Maximum resolution ring in pixels.</p> <code>pf8_detector_info</code> <code>TypeDetectorLayoutInformation</code> <p>Detector layout information.</p> <code>bad_pixel_map_filename</code> <code>str</code> <p>Path to the bad pixels map (mask).</p> <code>bad_pixel_map_hdf5_path</code> <code>str</code> <p>Key to acess the bad pixel map (mask).</p> <code>pixel_maps</code> <code>TypePixelMaps</code> <p>Map of the pixels positions in the laboratory coordinates.</p> <code>pixel_resolution</code> <code>float</code> <p>Reciprocal of the pixel size (1/m).</p> <code>geometry_txt</code> <code>list</code> <p>Content of the geometry file (.geom), in CrystFEL format.</p> Source code in <code>bblib/models.py</code> <pre><code>@dataclass\nclass PF8Info:\n    \"\"\"\n    This class defines the configuration parameters for peakfinder8.\n\n    Attributes:\n        max_num_peaks (np.int32): Maximum number of peaks.\n        adc_threshold (np.int32): Minimum threshold in arbitrary detector counts (ADC) units.\n        minimum_snr (np.float32): Minimum signal-to-noise ration.\n        min_pixel_count (np.int16): Minimum number of pixels to consider a Bragg peak.\n        max_pixel_count (np.int16): Maximum number of pixels to consider a Bragg peak.\n        local_bg_radius (np.int16): Local bakground radius in pixels.\n        min_res (np.int16): Minimum resolution ring in pixels.\n        max_res (np.int16): Maximum resolution ring in pixels.\n        pf8_detector_info (TypeDetectorLayoutInformation): Detector layout information.\n        bad_pixel_map_filename (str): Path to the bad pixels map (mask).\n        bad_pixel_map_hdf5_path (str): Key to acess the bad pixel map (mask).\n        pixel_maps (TypePixelMaps): Map of the pixels positions in the laboratory coordinates.\n        pixel_resolution (float): Reciprocal of the pixel size (1/m).\n        geometry_txt (list): Content of the geometry file (.geom), in CrystFEL format.\n    \"\"\"\n    max_num_peaks: np.int32 = 200\n    adc_threshold: np.int32 = 0\n    minimum_snr: np.float32 = 5\n    min_pixel_count: np.int16 = 2\n    max_pixel_count: np.int16 = 2000\n    local_bg_radius: np.int16 = 3\n    min_res: np.int16 = 0\n    max_res: np.int16 = 1200\n    pf8_detector_info: TypeDetectorLayoutInformation = None\n    bad_pixel_map_filename: str = None\n    bad_pixel_map_hdf5_path: str = None\n    pixel_maps: TypePixelMaps = None\n    pixel_resolution: float = None\n    _shifted_pixel_maps: bool = False\n    geometry_txt: list = None\n\n    def update_pixel_maps(self, detector_shift_x: int, detector_shift_y: int):\n        \"\"\"\n        This module checks whether the pixel maps have been shifted. If not, it shifts the entire detector along the x and y axes by the specified values.\n\n        Args:\n            detector_shift_in_x (int): Number of pixels to shift the entire detector in the x-axis, according to the CXI coordinate system.\n            detector_shift_in_y (int): Number of pixels to shift the entire detector in the y-axis, according to the CXI coordinate system.\n        \"\"\"\n\n        if not self._shifted_pixel_maps:\n            self._detector_shift_x = detector_shift_x\n            self._detector_shift_y = detector_shift_y\n            self._shifted_pixel_maps = True\n            self.pixel_maps[\"x\"] = (\n                self.pixel_maps[\"x\"].flatten() - detector_shift_x\n            ).reshape(self._data_shape)\n            self.pixel_maps[\"y\"] = (\n                self.pixel_maps[\"y\"].flatten() - detector_shift_y\n            ).reshape(self._data_shape)\n            self.pixel_maps[\"radius\"] = np.sqrt(\n                np.square(self.pixel_maps[\"x\"]) + np.square(self.pixel_maps[\"y\"])\n            ).reshape(self._data_shape)\n            self.pixel_maps[\"phi\"] = np.arctan2(\n                self.pixel_maps[\"y\"], self.pixel_maps[\"x\"]\n            )\n        else:\n            raise ValueError(\n                f\"Pixel maps have been moved once before, to avoid errors reset the geometry before moving it again.\"\n            )\n\n    def set_geometry_from_file(self, geometry_filename: str = None):\n        \"\"\"\n        This module sets the class attributes in accordance with the CrystFEL geometry file (.geom).\n\n        Args:\n            geometry_filename (str): Path to the CrystFEL geometry file (.geom).\n        \"\"\"\n        if geometry_filename:\n            self.geometry_txt = open(geometry_filename, \"r\").readlines()\n        else:\n            if not self.geometry_txt:\n                raise ValueError(\n                    \"Please, specify the detector geometry in CrystFEL format.\"\n                )\n\n        # Passing bad pixel maps to PF8.\n        # Warning! It will look for campus in the geom file either 'mask0_file' or 'mask_file'.\n        # It doesn't look for multiple masks.\n        # It assumes bad pixels as zeros and good pixels as ones.\n        try:\n            self.bad_pixel_map_filename = [\n                x.split(\" = \")[-1][:-1]\n                for x in self.geometry_txt\n                if x.split(\" = \")[0] == \"mask0_file\"\n            ][0]\n        except IndexError:\n            self.bad_pixel_map_filename = [\n                x.split(\" = \")[-1][:-1]\n                for x in self.geometry_txt\n                if x.split(\" = \")[0] == \"mask_file\"\n            ][0]\n\n        try:\n            self.bad_pixel_map_hdf5_path = [\n                x.split(\" = \")[-1][:-1]\n                for x in self.geometry_txt\n                if x.split(\" = \")[0] == \"mask0_data\"\n            ][0]\n        except IndexError:\n            self.bad_pixel_map_hdf5_path = [\n                x.split(\" = \")[-1][:-1]\n                for x in self.geometry_txt\n                if x.split(\" = \")[0] == \"mask\"\n            ][0]\n\n        geom = GeometryInformation(\n            geometry_description=self.geometry_txt, geometry_format=\"crystfel\"\n        )\n        self.pixel_resolution = 1 / geom.get_pixel_size()\n        self.pixel_maps = geom.get_pixel_maps()\n        self._data_shape = self.pixel_maps[\"x\"].shape\n        self._flattened_data_shape = self.pixel_maps[\"x\"].flatten().shape[0]\n        self.pf8_detector_info = geom.get_layout_info()\n        self._shifted_pixel_maps = False\n        self.detector_center_from_geom = self.get_detector_center()\n\n        if (\n            self.pf8_detector_info[\"nasics_x\"] * self.pf8_detector_info[\"nasics_y\"]\n        ) == 1:\n            ## Get single panel transformation matrix from the geometry file\n            ### Warning! Check carefully if the visualized data after reorientation of the panel makes sense, e.g. if it is equal to the real experimental data geometry.\n            detector, _, _ = _read_crystfel_geometry_from_text(\n                text_lines=self.geometry_txt\n            )\n            detector_panels = dict(detector[\"panels\"])\n            panel_name = list(detector_panels.keys())[0]\n            frame_dim_structure = [\n                x\n                for x in detector_panels[panel_name][\"dim_structure\"]\n                if x == \"ss\" or x == \"fs\"\n            ]\n            if frame_dim_structure[0] == \"ss\":\n                self.ss_in_rows = True\n            else:\n                self.ss_in_rows = False\n\n            fs_string = [\n                x.split(\" = \")[-1][:-1]\n                for x in self.geometry_txt\n                if (x.split(\" = \")[0]).split(\"/\")[-1] == \"fs\"\n            ][0]\n\n            ss_string = [\n                x.split(\" = \")[-1][:-1]\n                for x in self.geometry_txt\n                if (x.split(\" = \")[0]).split(\"/\")[-1] == \"ss\"\n            ][0]\n            pattern = r\"([-+]?\\d*\\.?\\d+)(?=[xyz])\"\n\n            try:\n                fsx, fsy, fsz = re.findall(pattern, fs_string)\n            except ValueError:\n                fsx, fsy = re.findall(pattern, fs_string)\n\n            try:\n                ssx, ssy, ssz = re.findall(pattern, ss_string)\n            except ValueError:\n                ssx, ssy = re.findall(pattern, ss_string)\n\n            ## The transformation matrix here is only for visualization purposes. Small stretching factors won't have an impact on the visualization of the images (slabby data).\n            self.transformation_matrix = [\n                [\n                    np.round(float(fsx)),\n                    np.round(float(fsy)),\n                ],\n                [\n                    np.round(float(ssx)),\n                    np.round(float(ssy)),\n                ],\n            ]\n\n    def get(self, parameter: str):\n        \"\"\"\n        This module return the peakfinder8 parameters.\n\n        Args:\n            parameter (str): Peakfinder8 parameter.\n        \"\"\"\n        if parameter == \"max_num_peaks\":\n            return self.max_num_peaks\n        elif parameter == \"adc_threshold\":\n            return self.adc_threshold\n        elif parameter == \"minimum_snr\":\n            return self.minimum_snr\n        elif parameter == \"min_pixel_count\":\n            return self.min_pixel_count\n        elif parameter == \"max_pixel_count\":\n            return self.max_pixel_count\n        elif parameter == \"local_bg_radius\":\n            return self.local_bg_radius\n        elif parameter == \"min_res\":\n            return self.min_res\n        elif parameter == \"max_res\":\n            return self.max_res\n        elif parameter == \"bad_pixel_map_filename\":\n            return self.bad_pixel_map_filename\n        elif parameter == \"bad_pixel_map_hdf5_path\":\n            return self.bad_pixel_map_hdf5_path\n\n    def get_detector_center(self) -&gt; list:\n        \"\"\"\n        This module return the detector center in x/y.\n\n        Returns:\n            center (list): The detector center in x/y.\n        \"\"\"\n        if not self._shifted_pixel_maps:\n\n            if (\n                self.pf8_detector_info[\"nasics_x\"] * self.pf8_detector_info[\"nasics_y\"]\n                &gt; 1\n            ):\n                # Multiple panels\n                # Get minimum array shape\n                y_minimum = (\n                    2\n                    * int(\n                        max(\n                            abs(self.pixel_maps[\"y\"].max()),\n                            abs(self.pixel_maps[\"y\"].min()),\n                        )\n                    )\n                    + 2\n                )\n                x_minimum = (\n                    2\n                    * int(\n                        max(\n                            abs(self.pixel_maps[\"x\"].max()),\n                            abs(self.pixel_maps[\"x\"].min()),\n                        )\n                    )\n                    + 2\n                )\n                visual_img_shape = (y_minimum, x_minimum)\n                # Detector center in the middle of the minimum array\n                _img_center_x = int(visual_img_shape[1] / 2)\n                _img_center_y = int(visual_img_shape[0] / 2)\n            else:\n                # Single panel\n                _img_center_x = int(abs(np.min(self.pixel_maps[\"x\"])))\n                _img_center_y = int(abs(np.min(self.pixel_maps[\"y\"])))\n        else:\n            print(\n                \"Warning! The detector center was moved by a previous operation, the detector center is not the same as in the geometry file.\"\n            )\n            _img_center_x = self.detector_center_from_geom[0] + self._detector_shift_x\n            _img_center_y = self.detector_center_from_geom[1] + self._detector_shift_y\n        return [_img_center_x, _img_center_y]\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8Info.get","title":"<code>get(parameter)</code>","text":"<p>This module return the peakfinder8 parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>str</code> <p>Peakfinder8 parameter.</p> required Source code in <code>bblib/models.py</code> <pre><code>def get(self, parameter: str):\n    \"\"\"\n    This module return the peakfinder8 parameters.\n\n    Args:\n        parameter (str): Peakfinder8 parameter.\n    \"\"\"\n    if parameter == \"max_num_peaks\":\n        return self.max_num_peaks\n    elif parameter == \"adc_threshold\":\n        return self.adc_threshold\n    elif parameter == \"minimum_snr\":\n        return self.minimum_snr\n    elif parameter == \"min_pixel_count\":\n        return self.min_pixel_count\n    elif parameter == \"max_pixel_count\":\n        return self.max_pixel_count\n    elif parameter == \"local_bg_radius\":\n        return self.local_bg_radius\n    elif parameter == \"min_res\":\n        return self.min_res\n    elif parameter == \"max_res\":\n        return self.max_res\n    elif parameter == \"bad_pixel_map_filename\":\n        return self.bad_pixel_map_filename\n    elif parameter == \"bad_pixel_map_hdf5_path\":\n        return self.bad_pixel_map_hdf5_path\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8Info.get_detector_center","title":"<code>get_detector_center()</code>","text":"<p>This module return the detector center in x/y.</p> <p>Returns:</p> Name Type Description <code>center</code> <code>list</code> <p>The detector center in x/y.</p> Source code in <code>bblib/models.py</code> <pre><code>def get_detector_center(self) -&gt; list:\n    \"\"\"\n    This module return the detector center in x/y.\n\n    Returns:\n        center (list): The detector center in x/y.\n    \"\"\"\n    if not self._shifted_pixel_maps:\n\n        if (\n            self.pf8_detector_info[\"nasics_x\"] * self.pf8_detector_info[\"nasics_y\"]\n            &gt; 1\n        ):\n            # Multiple panels\n            # Get minimum array shape\n            y_minimum = (\n                2\n                * int(\n                    max(\n                        abs(self.pixel_maps[\"y\"].max()),\n                        abs(self.pixel_maps[\"y\"].min()),\n                    )\n                )\n                + 2\n            )\n            x_minimum = (\n                2\n                * int(\n                    max(\n                        abs(self.pixel_maps[\"x\"].max()),\n                        abs(self.pixel_maps[\"x\"].min()),\n                    )\n                )\n                + 2\n            )\n            visual_img_shape = (y_minimum, x_minimum)\n            # Detector center in the middle of the minimum array\n            _img_center_x = int(visual_img_shape[1] / 2)\n            _img_center_y = int(visual_img_shape[0] / 2)\n        else:\n            # Single panel\n            _img_center_x = int(abs(np.min(self.pixel_maps[\"x\"])))\n            _img_center_y = int(abs(np.min(self.pixel_maps[\"y\"])))\n    else:\n        print(\n            \"Warning! The detector center was moved by a previous operation, the detector center is not the same as in the geometry file.\"\n        )\n        _img_center_x = self.detector_center_from_geom[0] + self._detector_shift_x\n        _img_center_y = self.detector_center_from_geom[1] + self._detector_shift_y\n    return [_img_center_x, _img_center_y]\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8Info.set_geometry_from_file","title":"<code>set_geometry_from_file(geometry_filename=None)</code>","text":"<p>This module sets the class attributes in accordance with the CrystFEL geometry file (.geom).</p> <p>Parameters:</p> Name Type Description Default <code>geometry_filename</code> <code>str</code> <p>Path to the CrystFEL geometry file (.geom).</p> <code>None</code> Source code in <code>bblib/models.py</code> <pre><code>def set_geometry_from_file(self, geometry_filename: str = None):\n    \"\"\"\n    This module sets the class attributes in accordance with the CrystFEL geometry file (.geom).\n\n    Args:\n        geometry_filename (str): Path to the CrystFEL geometry file (.geom).\n    \"\"\"\n    if geometry_filename:\n        self.geometry_txt = open(geometry_filename, \"r\").readlines()\n    else:\n        if not self.geometry_txt:\n            raise ValueError(\n                \"Please, specify the detector geometry in CrystFEL format.\"\n            )\n\n    # Passing bad pixel maps to PF8.\n    # Warning! It will look for campus in the geom file either 'mask0_file' or 'mask_file'.\n    # It doesn't look for multiple masks.\n    # It assumes bad pixels as zeros and good pixels as ones.\n    try:\n        self.bad_pixel_map_filename = [\n            x.split(\" = \")[-1][:-1]\n            for x in self.geometry_txt\n            if x.split(\" = \")[0] == \"mask0_file\"\n        ][0]\n    except IndexError:\n        self.bad_pixel_map_filename = [\n            x.split(\" = \")[-1][:-1]\n            for x in self.geometry_txt\n            if x.split(\" = \")[0] == \"mask_file\"\n        ][0]\n\n    try:\n        self.bad_pixel_map_hdf5_path = [\n            x.split(\" = \")[-1][:-1]\n            for x in self.geometry_txt\n            if x.split(\" = \")[0] == \"mask0_data\"\n        ][0]\n    except IndexError:\n        self.bad_pixel_map_hdf5_path = [\n            x.split(\" = \")[-1][:-1]\n            for x in self.geometry_txt\n            if x.split(\" = \")[0] == \"mask\"\n        ][0]\n\n    geom = GeometryInformation(\n        geometry_description=self.geometry_txt, geometry_format=\"crystfel\"\n    )\n    self.pixel_resolution = 1 / geom.get_pixel_size()\n    self.pixel_maps = geom.get_pixel_maps()\n    self._data_shape = self.pixel_maps[\"x\"].shape\n    self._flattened_data_shape = self.pixel_maps[\"x\"].flatten().shape[0]\n    self.pf8_detector_info = geom.get_layout_info()\n    self._shifted_pixel_maps = False\n    self.detector_center_from_geom = self.get_detector_center()\n\n    if (\n        self.pf8_detector_info[\"nasics_x\"] * self.pf8_detector_info[\"nasics_y\"]\n    ) == 1:\n        ## Get single panel transformation matrix from the geometry file\n        ### Warning! Check carefully if the visualized data after reorientation of the panel makes sense, e.g. if it is equal to the real experimental data geometry.\n        detector, _, _ = _read_crystfel_geometry_from_text(\n            text_lines=self.geometry_txt\n        )\n        detector_panels = dict(detector[\"panels\"])\n        panel_name = list(detector_panels.keys())[0]\n        frame_dim_structure = [\n            x\n            for x in detector_panels[panel_name][\"dim_structure\"]\n            if x == \"ss\" or x == \"fs\"\n        ]\n        if frame_dim_structure[0] == \"ss\":\n            self.ss_in_rows = True\n        else:\n            self.ss_in_rows = False\n\n        fs_string = [\n            x.split(\" = \")[-1][:-1]\n            for x in self.geometry_txt\n            if (x.split(\" = \")[0]).split(\"/\")[-1] == \"fs\"\n        ][0]\n\n        ss_string = [\n            x.split(\" = \")[-1][:-1]\n            for x in self.geometry_txt\n            if (x.split(\" = \")[0]).split(\"/\")[-1] == \"ss\"\n        ][0]\n        pattern = r\"([-+]?\\d*\\.?\\d+)(?=[xyz])\"\n\n        try:\n            fsx, fsy, fsz = re.findall(pattern, fs_string)\n        except ValueError:\n            fsx, fsy = re.findall(pattern, fs_string)\n\n        try:\n            ssx, ssy, ssz = re.findall(pattern, ss_string)\n        except ValueError:\n            ssx, ssy = re.findall(pattern, ss_string)\n\n        ## The transformation matrix here is only for visualization purposes. Small stretching factors won't have an impact on the visualization of the images (slabby data).\n        self.transformation_matrix = [\n            [\n                np.round(float(fsx)),\n                np.round(float(fsy)),\n            ],\n            [\n                np.round(float(ssx)),\n                np.round(float(ssy)),\n            ],\n        ]\n</code></pre>"},{"location":"reference/models/#bblib.models.PF8Info.update_pixel_maps","title":"<code>update_pixel_maps(detector_shift_x, detector_shift_y)</code>","text":"<p>This module checks whether the pixel maps have been shifted. If not, it shifts the entire detector along the x and y axes by the specified values.</p> <p>Parameters:</p> Name Type Description Default <code>detector_shift_in_x</code> <code>int</code> <p>Number of pixels to shift the entire detector in the x-axis, according to the CXI coordinate system.</p> required <code>detector_shift_in_y</code> <code>int</code> <p>Number of pixels to shift the entire detector in the y-axis, according to the CXI coordinate system.</p> required Source code in <code>bblib/models.py</code> <pre><code>def update_pixel_maps(self, detector_shift_x: int, detector_shift_y: int):\n    \"\"\"\n    This module checks whether the pixel maps have been shifted. If not, it shifts the entire detector along the x and y axes by the specified values.\n\n    Args:\n        detector_shift_in_x (int): Number of pixels to shift the entire detector in the x-axis, according to the CXI coordinate system.\n        detector_shift_in_y (int): Number of pixels to shift the entire detector in the y-axis, according to the CXI coordinate system.\n    \"\"\"\n\n    if not self._shifted_pixel_maps:\n        self._detector_shift_x = detector_shift_x\n        self._detector_shift_y = detector_shift_y\n        self._shifted_pixel_maps = True\n        self.pixel_maps[\"x\"] = (\n            self.pixel_maps[\"x\"].flatten() - detector_shift_x\n        ).reshape(self._data_shape)\n        self.pixel_maps[\"y\"] = (\n            self.pixel_maps[\"y\"].flatten() - detector_shift_y\n        ).reshape(self._data_shape)\n        self.pixel_maps[\"radius\"] = np.sqrt(\n            np.square(self.pixel_maps[\"x\"]) + np.square(self.pixel_maps[\"y\"])\n        ).reshape(self._data_shape)\n        self.pixel_maps[\"phi\"] = np.arctan2(\n            self.pixel_maps[\"y\"], self.pixel_maps[\"x\"]\n        )\n    else:\n        raise ValueError(\n            f\"Pixel maps have been moved once before, to avoid errors reset the geometry before moving it again.\"\n        )\n</code></pre>"},{"location":"reference/utils/","title":"Utils","text":""},{"location":"reference/utils/#bblib.utils","title":"<code>utils</code>","text":"<p>This module defines auxiliary funtions to process the data.</p>"},{"location":"reference/utils/#bblib.utils.azimuthal_average","title":"<code>azimuthal_average(data, center=None, mask=None)</code>","text":"<p>Calculate azimuthal integration of data in relation to the center of the image Adapted from L. P. Ren\u00e9 de Cotret work on scikit-ued (https://github.com/LaurentRDC/scikit-ued/tree/master) L. P. Ren\u00e9 de Cotret, M. R. Otto, M. J. Stern. and B. J. Siwick, An open-source software ecosystem for the interactive exploration of ultrafast electron scattering data, Advanced Structural and Chemical Imaging 4:11 (2018) DOI: 10.1186/s40679-018-0060-y.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>Input data in which center of mass will be calculated. Values equal or less than zero will not be considered.</p> required <code>center</code> <code>tuple</code> <p>Center coordinates of the radial average (xc, yc)-&gt;(col, row).</p> <code>None</code> <code>mask</code> <code>ndarray</code> <p>Corresponding mask of data, containing zeros for unvalid pixels and one for valid pixels. Mask shape should be same size of data.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>radius</code> <code>ndarray</code> <p>Radial axis in pixels.</p> <code>intensity</code> <code>ndarray</code> <p>Integrated intensity normalized by the number of valid pixels.</p> Source code in <code>bblib/utils.py</code> <pre><code>def azimuthal_average(\n    data: np.ndarray, center: tuple = None, mask: np.ndarray = None\n) -&gt; np.ndarray:\n    \"\"\"\n    Calculate azimuthal integration of data in relation to the center of the image\n    Adapted from L. P. Ren\u00e9 de Cotret work on scikit-ued (https://github.com/LaurentRDC/scikit-ued/tree/master)\n    L. P. Ren\u00e9 de Cotret, M. R. Otto, M. J. Stern. and B. J. Siwick, An open-source software ecosystem for the interactive exploration of ultrafast electron scattering data, Advanced Structural and Chemical Imaging 4:11 (2018) DOI: 10.1186/s40679-018-0060-y.\n\n    Args:\n        data (np.ndarray): Input data in which center of mass will be calculated. Values equal or less than zero will not be considered.\n        center (tuple): Center coordinates of the radial average (xc, yc)-&gt;(col, row).\n        mask (np.ndarray): Corresponding mask of data, containing zeros for unvalid pixels and one for valid pixels. Mask shape should be same size of data.\n\n    Returns:\n        radius (np.ndarray): Radial axis in pixels.\n        intensity (np.ndarray): Integrated intensity normalized by the number of valid pixels.\n    \"\"\"\n    a = data.shape[0]\n    b = data.shape[1]\n    if mask is None:\n        mask = np.zeros((a, b), dtype=bool)\n    else:\n        mask.astype(bool)\n\n    if center is None:\n        center = [b / 2, a / 2]\n    [X, Y] = np.meshgrid(np.arange(b) - center[0], np.arange(a) - center[1])\n    R = np.sqrt(np.square(X) + np.square(Y))\n    Rint = np.rint(R).astype(int)\n\n    valid = mask.flatten()\n    data = data.flatten()\n    Rint = Rint.flatten()\n\n    px_bin = np.bincount(Rint, weights=valid * data)\n    r_bin = np.bincount(Rint, weights=valid)\n    radius = np.arange(0, r_bin.size)\n    # Replace by one if r_bin is zero for division\n    np.maximum(r_bin, 1, out=r_bin)\n\n    return radius, px_bin / r_bin\n</code></pre>"},{"location":"reference/utils/#bblib.utils.center_of_mass","title":"<code>center_of_mass(data, mask=None)</code>","text":"<p>Adapted from Robert B\u00fccker work on diffractem (https://github.com/robertbuecker/diffractem/tree/master) B\u00fccker, R., Hogan-Lamarre, P., Mehrabi, P. et al. Serial protein crystallography in an electron microscope. Nat Commun 11, 996 (2020). https://doi.org/10.1038/s41467-020-14793-0</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>Input data in which center of mass will be calculated. Values equal or less than zero will not be considered.</p> required <code>mask</code> <code>ndarray</code> <p>Corresponding mask of data, containing zeros for unvalid pixels and one for valid pixels. Mask shape should be same size of data.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>xc</code> <code>int</code> <p>Coordinate of the diffraction center in x, such that the image center corresponds to data [yc, xc].</p> <code>yc</code> <code>int</code> <p>Coordinate of the diffraction center in y, such that the image center corresponds to data [yc, xc].</p> Source code in <code>bblib/utils.py</code> <pre><code>def center_of_mass(data: np.ndarray, mask: np.ndarray = None) -&gt; list[int]:\n    \"\"\"\n    Adapted from Robert B\u00fccker work on diffractem (https://github.com/robertbuecker/diffractem/tree/master)\n    B\u00fccker, R., Hogan-Lamarre, P., Mehrabi, P. et al. Serial protein crystallography in an electron microscope. Nat Commun 11, 996 (2020). https://doi.org/10.1038/s41467-020-14793-0\n\n    Args:\n        data (np.ndarray): Input data in which center of mass will be calculated. Values equal or less than zero will not be considered.\n        mask (np.ndarray): Corresponding mask of data, containing zeros for unvalid pixels and one for valid pixels. Mask shape should be same size of data.\n\n    Returns:\n        xc (int): Coordinate of the diffraction center in x, such that the image center corresponds to data [yc, xc].\n        yc (int): Coordinate of the diffraction center in y, such that the image center corresponds to data [yc, xc].\n    \"\"\"\n\n    if mask is None:\n        mask = np.ones_like(data)\n    data = data * mask\n    indexes = np.where(data &gt; 0)\n    if np.sum(data[indexes]) &gt; 1e-7:\n        xc = np.sum(data[indexes] * indexes[1]) / np.sum(data[indexes])\n        yc = np.sum(data[indexes] * indexes[0]) / np.sum(data[indexes])\n    else:\n        xc = -1\n        yc = -1\n\n    if np.isnan(xc) or np.isnan(yc):\n        xc = -1\n        yc = -1\n\n    return [np.round(xc, 1), np.round(yc, 1)]\n</code></pre>"},{"location":"reference/utils/#bblib.utils.circle_mask","title":"<code>circle_mask(data, center, radius)</code>","text":"<p>Make a  ring mask for the data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>Image in which mask will be shaped</p> required <code>radius</code> <code>int</code> <p>Outer radius of the mask</p> required <p>Returns:</p> Name Type Description <code>mask</code> <code>ndarray</code> <p>Mask array containg zeros (pixels to be masked) and ones (valid pixels).</p> Source code in <code>bblib/utils.py</code> <pre><code>def circle_mask(data: np.ndarray, center: tuple, radius: int) -&gt; np.ndarray:\n    \"\"\"\n    Make a  ring mask for the data\n\n    Args:\n        data (np.ndarray): Image in which mask will be shaped\n        radius (int): Outer radius of the mask\n\n    Returns:\n        mask (np.ndarray): Mask array containg zeros (pixels to be masked) and ones (valid pixels).\n    \"\"\"\n\n    bin_size = bin\n    a = data.shape[0]\n    b = data.shape[1]\n\n    [X, Y] = np.meshgrid(np.arange(b) - center[0], np.arange(a) - center[1])\n    R = np.sqrt(np.square(X) + np.square(Y))\n    return (np.greater(R, radius)).astype(np.int32)\n</code></pre>"},{"location":"reference/utils/#bblib.utils.correct_polarization","title":"<code>correct_polarization(x, y, dist, data, mask, polarization_axis='x', p=0.99)</code>","text":"<p>Correct data for polarisation effect, version in Python. It is based on pMakePolarisationArray from https://github.com/galchenm/vdsCsPadMaskMaker/blob/main/new-versions/maskMakerGUI-v2.py#L234 Acknowledgements: Oleksandr Yefanov, Marina Galchenkova</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>Array containg pixels coordinates in x (pixels) distance from the direct beam. It has same shape of data.</p> required <code>y</code> <code>ndarray</code> <p>Array containg pixels coordinates in y (pixels) distance from the direct beam. It has same shape of data.</p> required <code>dist</code> <code>float</code> <p>z distance coordinates of the detector position in pixels.</p> required <code>data</code> <code>ndarray</code> <p>Raw data frame in which polarization correction will be applied.</p> required <code>mask</code> <code>ndarray</code> <p>Corresponding mask of data, containing zeros for unvalid pixels and one for valid pixels. Mask shape should be same size of data.</p> required <p>Returns:</p> Name Type Description <code>corrected_data</code> <code>ndarray</code> <p>Corrected data frame for polarization effect.</p> <code>pol</code> <code>ndarray</code> <p>Polarization array for polarization correction.</p> Source code in <code>bblib/utils.py</code> <pre><code>def correct_polarization(\n    x: np.ndarray,\n    y: np.ndarray,\n    dist: float,\n    data: np.ndarray,\n    mask: np.ndarray,\n    polarization_axis: str = \"x\",\n    p: float = 0.99,\n) -&gt; np.ndarray:\n    \"\"\"\n    Correct data for polarisation effect, version in Python. It is based on pMakePolarisationArray from https://github.com/galchenm/vdsCsPadMaskMaker/blob/main/new-versions/maskMakerGUI-v2.py#L234\n    Acknowledgements: Oleksandr Yefanov, Marina Galchenkova\n\n    Args:\n        x (np.ndarray): Array containg pixels coordinates in x (pixels) distance from the direct beam. It has same shape of data.\n        y (np.ndarray): Array containg pixels coordinates in y (pixels) distance from the direct beam. It has same shape of data.\n        dist (float): z distance coordinates of the detector position in pixels.\n        data (np.ndarray): Raw data frame in which polarization correction will be applied.\n        mask (np.ndarray): Corresponding mask of data, containing zeros for unvalid pixels and one for valid pixels. Mask shape should be same size of data.\n\n    Returns:\n        corrected_data (np.ndarray): Corrected data frame for polarization effect.\n        pol (np.ndarray): Polarization array for polarization correction.\n    \"\"\"\n\n    mask = mask.astype(bool)\n    mask = mask.flatten()\n    intensity = np.reshape(data.copy(), len(mask))\n    pol = mask.copy().astype(np.float32)\n    pol = make_polarization_array(pol, x.flatten(), y.flatten(), dist, p)\n    intensity = intensity / pol\n    return intensity.reshape(data.shape), pol.reshape(data.shape)\n</code></pre>"},{"location":"reference/utils/#bblib.utils.fsss_to_xy","title":"<code>fsss_to_xy(point, m)</code>","text":"<p>Transforms from the fast-scan/slow-scan basis to the x/y basis.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>tuple</code> required <code>m</code> <code>list</code> <p>A 2x2 transformation matrix.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>The corresponding (x, y) coordinates.</p> Source code in <code>bblib/utils.py</code> <pre><code>def fsss_to_xy(point: tuple, m: list) -&gt; tuple:\n    \"\"\"\n    Transforms from the fast-scan/slow-scan basis to the x/y basis.\n\n    Args:\n        point (tuple):\n        m (list): A 2x2 transformation matrix.\n\n    Returns:\n        tuple: The corresponding (x, y) coordinates.\n\n    \"\"\"\n\n    d = m[0][0] * m[1][1] - m[0][1] * m[1][0]\n    ss = point[0] + 1\n    fs = point[1] + 1\n    x = int((m[1][1] / d) * fs - (m[0][1] / d) * ss)\n    y = int(-(m[1][0] / d) * fs + (m[0][0] / d) * ss)\n    return x, y\n</code></pre>"},{"location":"reference/utils/#bblib.utils.gaussian","title":"<code>gaussian(x, a, x0, sigma)</code>","text":"<p>Gaussian function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>x-axis.</p> required <code>a</code> <code>float</code> <p>Amplitude of the Gaussian.</p> required <code>x0</code> <code>float</code> <p>Average of the Gaussian.</p> required <code>sigma</code> <code>float</code> <p>Standard deviation of the Gaussian.</p> required <p>Returns:</p> Name Type Description <code>y</code> <code>ndarray</code> <p>y-axis.</p> Source code in <code>bblib/utils.py</code> <pre><code>def gaussian(x: np.ndarray, a: float, x0: float, sigma: float) -&gt; np.ndarray:\n    \"\"\"\n    Gaussian function.\n\n    Args:\n        x (np.ndarray): x-axis.\n        a (float): Amplitude of the Gaussian.\n        x0 (float): Average of the Gaussian.\n        sigma (float): Standard deviation of the Gaussian.\n\n    Returns:\n        y (np.ndarray): y-axis.\n    \"\"\"\n\n    return a * exp(-((x - x0) ** 2) / (2 * sigma**2))\n</code></pre>"},{"location":"reference/utils/#bblib.utils.gaussian_lin","title":"<code>gaussian_lin(x, a, x0, sigma, m, n)</code>","text":"<p>Gaussian function summed to a linear function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>x-axis.</p> required <code>a</code> <code>float</code> <p>Amplitude of the Gaussian.</p> required <code>x0</code> <code>float</code> <p>Average of the Gaussian.</p> required <code>sigma</code> <code>float</code> <p>Standard deviation of the Gaussian.</p> required <code>m</code> <code>float</code> <p>Angular coefficient.</p> required <code>n</code> <code>float</code> <p>Linear coefficient.</p> required <p>Returns:</p> Name Type Description <code>y</code> <code>ndarray</code> <p>y-axis.</p> Source code in <code>bblib/utils.py</code> <pre><code>def gaussian_lin(\n    x: np.ndarray, a: float, x0: float, sigma: float, m: float, n: float\n) -&gt; np.ndarray:\n    \"\"\"\n    Gaussian function summed to a linear function.\n\n    Args:\n        x (np.ndarray): x-axis.\n        a (float): Amplitude of the Gaussian.\n        x0 (float): Average of the Gaussian.\n        sigma (float): Standard deviation of the Gaussian.\n        m: Angular coefficient.\n        n: Linear coefficient.\n\n    Returns:\n        y (np.ndarray): y-axis.\n    \"\"\"\n    return m * x + n + a * exp(-((x - x0) ** 2) / (2 * sigma**2))\n</code></pre>"},{"location":"reference/utils/#bblib.utils.get_fwhm_map_global_min","title":"<code>get_fwhm_map_global_min(lines, output_folder, label, pixel_step, plots_flag)</code>","text":"<p>Open FWHM grid search optmization plot, fit projections in both axis to get the point of maximum sharpness of the radial average. TODO Refactor.</p> <p>Parameters:</p> Name Type Description Default <code>lines</code> <code>list</code> <p>Output of grid search for FWHM optmization, each line must contain a dictionary contaning entries for xc, yc and fwhm_over_radius.</p> required <code>output_folder</code> <code>str</code> <p>Path to the folder where plots are saved.</p> required <code>label</code> <code>str</code> <p>Plots filename label.</p> required <code>pixel_step</code> <code>str</code> <p>Step size between grid points in pixels.</p> required <code>plots_flag</code> <code>bool</code> <p>If True, plots can be generated.</p> required <p>Returns:</p> Name Type Description <code>xc</code> <code>int</code> <p>Coordinate of the diffraction center in x, such that the image center corresponds to data [yc, xc].</p> <code>yc</code> <code>int</code> <p>Coordinate of the diffraction center in y, such that the image center corresponds to data [yc, xc].</p> Source code in <code>bblib/utils.py</code> <pre><code>def get_fwhm_map_global_min(\n    lines: list, output_folder: str, label: str, pixel_step: int, plots_flag: bool\n) -&gt; tuple:\n    \"\"\"\n    Open FWHM grid search optmization plot, fit projections in both axis to get the point of maximum sharpness of the radial average.\n    TODO Refactor.\n\n    Args:\n        lines (list): Output of grid search for FWHM optmization, each line must contain a dictionary contaning entries for xc, yc and fwhm_over_radius.\n        output_folder (str): Path to the folder where plots are saved.\n        label (str): Plots filename label.\n        pixel_step (str): Step size between grid points in pixels.\n        plots_flag (bool): If True, plots can be generated.\n\n    Returns:\n        xc (int): Coordinate of the diffraction center in x, such that the image center corresponds to data [yc, xc].\n        yc (int): Coordinate of the diffraction center in y, such that the image center corresponds to data [yc, xc].\n    \"\"\"\n    n = int(math.sqrt(len(lines)))\n\n    merged_dict = {}\n    for dictionary in lines[:]:\n        for key, value in dictionary.items():\n            if key in merged_dict:\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [value]\n\n    # Create a figure with three subplots\n    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(10, 10))\n\n    # Extract x, y, and z from merged_dict\n\n    x = np.array(merged_dict[\"xc\"]).reshape((n, n))[0]\n    y = np.array(merged_dict[\"yc\"]).reshape((n, n))[:, 0]\n    z = np.array(merged_dict[\"fwhm\"], dtype=np.float64).reshape((n, n))\n    r = np.array(merged_dict[\"r_squared\"]).reshape((n, n))\n    z = np.nan_to_num(z)\n    r = np.nan_to_num(r)\n    pos1 = ax1.imshow(z, cmap=\"rainbow\")\n    step = 10\n    n = z.shape[0]\n\n    ax1.set_xticks(np.arange(0, n, step, dtype=int))\n    ax1.set_yticks(np.arange(0, n, step, dtype=int))\n\n    step = round(step * (abs(x[0] - x[1])), 1)\n    ax1.set_xticklabels(\n        np.arange(round(x[0], 1), round(x[-1] + step, 1), step, dtype=int), rotation=45\n    )\n    ax1.set_yticklabels(\n        np.arange(round(y[0], 1), round(y[-1] + step, 1), step, dtype=int)\n    )\n    ax1.set_ylabel(\"yc [px]\")\n    ax1.set_xlabel(\"xc [px]\")\n    ax1.set_title(\"FWHM\")\n\n    pos2 = ax2.imshow(r, cmap=\"rainbow\")\n    step = 10\n    n = z.shape[0]\n\n    ax2.set_xticks(np.arange(0, n, step, dtype=int))\n    ax2.set_yticks(np.arange(0, n, step, dtype=int))\n\n    step = round(step * (abs(x[0] - x[1])), 1)\n    ax2.set_xticklabels(\n        np.arange(round(x[0], 1), round(x[-1] + step, 1), step, dtype=int), rotation=45\n    )\n    ax2.set_yticklabels(\n        np.arange(round(y[0], 1), round(y[-1] + step, 1), step, dtype=int)\n    )\n\n    ax2.set_ylabel(\"yc [px]\")\n    ax2.set_xlabel(\"xc [px]\")\n    ax2.set_title(\"R\u00b2\")\n\n    proj_x = np.sum(z, axis=0) // n\n    x = np.arange(x[0], x[-1] + pixel_step, pixel_step)\n    index_x = np.unravel_index(np.argmin(proj_x, axis=None), proj_x.shape)\n    xc = x[index_x]\n    ax3.scatter(x, proj_x, color=\"b\")\n    ax3.scatter(xc, proj_x[index_x], color=\"r\", label=f\"xc: {xc}\")\n    ax3.set_ylabel(\"Average FWHM\")\n    ax3.set_xlabel(\"xc [px]\")\n    ax3.set_title(\"FWHM projection in x\")\n    ax3.legend()\n\n    proj_y = np.sum(z, axis=1) // n\n    x = np.arange(y[0], y[-1] + pixel_step, pixel_step)\n    index_y = np.unravel_index(np.argmin(proj_y, axis=None), proj_y.shape)\n    yc = x[index_y]\n    ax4.scatter(x, proj_y, color=\"b\")\n    ax4.scatter(yc, proj_y[index_y], color=\"r\", label=f\"yc: {yc}\")\n    ax4.set_ylabel(\"Average FWHM\")\n    ax4.set_xlabel(\"yc [px]\")\n    ax4.set_title(\"FWHM projection in y\")\n    ax4.legend()\n\n    fig.colorbar(pos1, ax=ax1, shrink=0.6)\n    fig.colorbar(pos2, ax=ax2, shrink=0.6)\n\n    if int(np.sum(proj_y)) == 0 or int(np.sum(proj_x)) == 0:\n        xc = -1\n        yc = -1\n    else:\n        if plots_flag:\n            plt.savefig(f\"{output_folder}/fwhm_map/{label}.png\")\n    plt.close()\n    return [np.round(xc, 0), np.round(yc, 0)]\n</code></pre>"},{"location":"reference/utils/#bblib.utils.make_polarization_array","title":"<code>make_polarization_array(pol, cox, coy, detdist, poldegree)</code>","text":"<p>Create the polarization array for horizontal polarization correction, version in Python. It is based on pMakePolarisationArray from https://github.com/galchenm/vdsCsPadMaskMaker/blob/main/new-versions/maskMakerGUI-v2.py#L234 Acknowledgements: Oleksandr Yefanov, Marina Galchenkova</p> <p>Parameters:</p> Name Type Description Default <code>pol</code> <code>ndarray</code> <p>An array where polarization arra will be built based on its shape. Mask shape is the same size of data. Unvalid pixels (values containing 0) will be skipped from calculation and put 1.</p> required <code>cox</code> <code>ndarray</code> <p>Array containg pixels coordinates in x (pixels) distance from the direct beam. It has same shape of data.</p> required <code>coy</code> <code>ndarray</code> <p>Array containg pixels coordinates in y (pixels) distance from the direct beam. It has same shape of data.</p> required <code>detdist</code> <code>float</code> <p>Detector distance from the sample in meters . The detctor distance will be transformed in pixel units based on Res defined as global parameter.</p> required <code>poldegree</code> <code>float</code> <p>Polarization degree from [0,1]. The horizontal polarization at most synchrotrons sources, e.g DESY, p is 0.99.</p> required <p>Returns:     pol (np.ndarray): Polarization array for polarization correction.</p> Source code in <code>bblib/utils.py</code> <pre><code>def make_polarization_array(\n    pol: np.ndarray, cox: np.ndarray, coy: np.ndarray, detdist: float, poldegree: float\n) -&gt; np.ndarray:\n    \"\"\"\n    Create the polarization array for horizontal polarization correction, version in Python. It is based on pMakePolarisationArray from https://github.com/galchenm/vdsCsPadMaskMaker/blob/main/new-versions/maskMakerGUI-v2.py#L234\n    Acknowledgements: Oleksandr Yefanov, Marina Galchenkova\n\n    Args:\n        pol (np.ndarray): An array where polarization arra will be built based on its shape. Mask shape is the same size of data. Unvalid pixels (values containing 0) will be skipped from calculation and put 1.\n        cox (np.ndarray): Array containg pixels coordinates in x (pixels) distance from the direct beam. It has same shape of data.\n        coy (np.ndarray): Array containg pixels coordinates in y (pixels) distance from the direct beam. It has same shape of data.\n        detdist (float): Detector distance from the sample in meters . The detctor distance will be transformed in pixel units based on Res defined as global parameter.\n        poldegree (float): Polarization degree from [0,1]. The horizontal polarization at most synchrotrons sources, e.g DESY, p is 0.99.\n    Returns:\n        pol (np.ndarray): Polarization array for polarization correction.\n    \"\"\"\n\n    z = detdist * np.ones(cox.shape[0])\n    valid = np.where(pol == 1)\n\n    pol[valid] = 1 - (\n        (poldegree * (cox[valid] ** 2) + (1 - poldegree) * (coy[valid] ** 2))\n        / (cox[valid] ** 2 + coy[valid] ** 2 + z[valid] ** 2)\n    )\n    pol[np.where(pol == 0)] = 1.0\n\n    return pol\n</code></pre>"},{"location":"reference/utils/#bblib.utils.mask_peaks","title":"<code>mask_peaks(mask, indexes, bragg, n)</code>","text":"<p>Gather coordinates of a box of 1x1 pixels around each point from the indexes list. Bragg flag indicates if the mask returned will contain only bragg peaks regions (bragg =1), no bragg peaks regions (bragg=0), or both (bragg =-1).</p> <p>Parameters:</p> Name Type Description Default <code>mask</code> <code>ndarray</code> <p>An array where mask will be built based on its shape. Mask shape is the same size of data.</p> required <code>indexes</code> <code>tuple</code> <p>Bragg peaks coordinates, indexes[0] contains x-coordinates of Bragg peaks and indexes[1] the corresponding y-coordinates.</p> required <code>bragg</code> <code>int</code> <p>Bragg flag, choose between return only peaks, only background or both (bypass masking of peaks).</p> required <code>n</code> <code>int</code> <p>Number of pixels to build a 2*n box around the Bragg peaks.</p> required <p>Returns:</p> Name Type Description <code>surrounding_mask</code> <code>ndarray</code> <p>Corresponding mask according to bragg flag choice. It contains zeros for unvalid pixels and one for valid pixels. Mask shape is the same size of data.</p> Source code in <code>bblib/utils.py</code> <pre><code>def mask_peaks(mask: np.ndarray, indexes: tuple, bragg: int, n: int) -&gt; np.ndarray:\n    \"\"\"\n    Gather coordinates of a box of 1x1 pixels around each point from the indexes list. Bragg flag indicates if the mask returned will contain only bragg peaks regions (bragg =1), no bragg peaks regions (bragg=0), or both (bragg =-1).\n\n    Args:\n        mask (np.ndarray): An array where mask will be built based on its shape. Mask shape is the same size of data.\n        indexes (tuple): Bragg peaks coordinates, indexes[0] contains x-coordinates of Bragg peaks and indexes[1] the corresponding y-coordinates.\n        bragg (int): Bragg flag, choose between return only peaks, only background or both (bypass masking of peaks).\n        n (int): Number of pixels to build a 2*n box around the Bragg peaks.\n\n    Returns:\n        surrounding_mask (np.ndarray): Corresponding mask according to bragg flag choice. It contains zeros for unvalid pixels and one for valid pixels. Mask shape is the same size of data.\n    \"\"\"\n    surrounding_positions = []\n    count = 0\n    for index in zip(indexes[0], indexes[1]):\n        row, col = index\n        for i in range(-n, n + 1):\n            for k in range(-n, n + 1):\n                surrounding_positions.append((row + i, col + k))\n        count += 1\n\n    # print(args.bragg)\n    if bragg == 1:\n        surrounding_mask = np.zeros_like(mask)\n        for pos in surrounding_positions:\n            row, col = pos\n            if 0 &lt;= row &lt; mask.shape[0] and 0 &lt;= col &lt; mask.shape[1]:\n                surrounding_mask[row, col] = 1\n    elif bragg == -1:\n        surrounding_mask = np.ones_like(mask)\n    else:\n        surrounding_mask = np.ones_like(mask)\n        for pos in surrounding_positions:\n            row, col = pos\n            if 0 &lt;= row &lt; mask.shape[0] and 0 &lt;= col &lt; mask.shape[1]:\n                surrounding_mask[row, col] = 0\n\n    return surrounding_mask\n</code></pre>"},{"location":"reference/utils/#bblib.utils.ring_mask","title":"<code>ring_mask(data, center, inner_radius, outer_radius)</code>","text":"<p>Make a  ring mask for the data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>Image in which mask will be shaped</p> required <code>center</code> <code>tuple</code> <p>(xc,yc)</p> required <code>inner_radius</code> <code>int</code> required <code>outer_radius</code> <code>int</code> required <p>Returns:</p> Name Type Description <code>mask</code> <code>ndarray</code> <p>Mask array containg zeros (pixels to be masked) and ones (valid pixels).</p> Source code in <code>bblib/utils.py</code> <pre><code>def ring_mask(\n    data: np.ndarray, center: tuple, inner_radius: int, outer_radius: int\n) -&gt; np.ndarray:\n    \"\"\"\n    Make a  ring mask for the data\n\n    Args:\n        data (np.ndarray): Image in which mask will be shaped\n        center (tuple): (xc,yc)\n        inner_radius (int):\n        outer_radius (int):\n\n    Returns:\n        mask (np.ndarray): Mask array containg zeros (pixels to be masked) and ones (valid pixels).\n    \"\"\"\n\n    bin_size = bin\n    a = data.shape[0]\n    b = data.shape[1]\n    [X, Y] = np.meshgrid(np.arange(b) - center[0], np.arange(a) - center[1])\n    R = np.sqrt(np.square(X) + np.square(Y))\n    bin_size = outer_radius - inner_radius\n    return np.greater(R, outer_radius - bin_size) &amp; np.less(R, outer_radius + bin_size)\n</code></pre>"},{"location":"reference/utils/#bblib.utils.visualize_single_panel","title":"<code>visualize_single_panel(data, transformation_matrix, ss_in_rows)</code>","text":"<p>Creates a visulization array for single panel detectors after applying the detector geometry.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray</code> <p>Image in which mask will be shaped</p> required <code>transformation_matrix</code> <code>ndarray</code> <p>A 2x2 transformation matrix used to map         from fast-scan/slow-scan to x/y coordinates.     ss_in_rows (bool): If True, the slow-scan axis is mapped to rows; otherwise to columns.</p> <p>Returns:     np.ndarray: The transformed visualization array.</p> required Source code in <code>bblib/utils.py</code> <pre><code>def visualize_single_panel(\n    data: np.ndarray, transformation_matrix: np.ndarray, ss_in_rows: bool\n) -&gt; np.ndarray:\n    \"\"\"\n    Creates a visulization array for single panel detectors after applying the detector geometry.\n\n    Args:\n        data (np.ndarray): Image in which mask will be shaped\n        transformation_matrix (np.ndarray): A 2x2 transformation matrix used to map\n                    from fast-scan/slow-scan to x/y coordinates.\n                ss_in_rows (bool): If True, the slow-scan axis is mapped to rows; otherwise to columns.\n\n            Returns:\n                np.ndarray: The transformed visualization array.\n    \"\"\"\n    visual_data = np.full((2 * max(data.shape) + 1, 2 * max(data.shape) + 1), np.nan)\n\n    for i in range(data.shape[0]):\n        for j in range(data.shape[1]):\n            point = (i, j) if ss_in_rows else (j, i)\n            xy_j, xy_i = fsss_to_xy(point, transformation_matrix)\n            visual_data[xy_i][xy_j] = data[i][j]\n\n    non_nan_indices = np.where(~np.isnan(visual_data))\n    min_row_index, min_col_index = np.min(non_nan_indices, axis=1)\n    max_row_index, max_col_index = np.max(non_nan_indices, axis=1)\n\n    return visual_data[\n        min_row_index : max_row_index + 1, min_col_index : max_col_index + 1\n    ]\n</code></pre>"},{"location":"tutorial/center_of_mass/center_of_mass/","title":"Center of mass","text":"<pre><code>import h5py\nimport hdf5plugin\nimport numpy as np\nimport fabio\nimport matplotlib.pyplot as plt\nimport om.lib.geometry as geometry\n\nfrom bblib.methods import CenterOfMass\nfrom bblib.models import PF8Info, PF8\nfrom bblib.utils import visualize_single_panel\n</code></pre> <p>Set here the absolute path to bblib_tutorial</p> <pre><code>tutorial_path=\"/path/to/bblib_tutorial\"\n</code></pre> <p>You will need to set the tutorial_path on the mask_file parameter in the geometry files cointaned in the bblib_tutorial/geoms folder</p> <pre><code>config = {\n    \"plots_flag\": True,\n    \"pf8\": {\n        \"max_num_peaks\": 10000,\n        \"adc_threshold\": 10,\n        \"minimum_snr\": 5,\n        \"min_pixel_count\": 2,\n        \"max_pixel_count\": 200,\n        \"local_bg_radius\": 3,\n        \"min_res\": 0,\n        \"max_res\": 1200\n        },\n    \"offset\": {\n        \"x\": 0.5,\n        \"y\": 0.5\n        },\n    \"bragg_peaks_positions_for_center_of_mass_calculation\": 0,\n    \"pixels_for_mask_of_bragg_peaks\": 2,\n    \"polarization\": {\n        \"apply_polarization_correction\": True,\n        \"axis\":\"x\",\n        \"value\":0.99\n        }\n}\n</code></pre> <pre><code>PF8Config=PF8Info(\n        max_num_peaks=config[\"pf8\"][\"max_num_peaks\"],\n        adc_threshold=config[\"pf8\"][\"adc_threshold\"],\n        minimum_snr=config[\"pf8\"][\"minimum_snr\"],\n        min_pixel_count=config[\"pf8\"][\"min_pixel_count\"],\n        max_pixel_count=config[\"pf8\"][\"max_pixel_count\"],\n        local_bg_radius=config[\"pf8\"][\"local_bg_radius\"],\n        min_res=config[\"pf8\"][\"min_res\"],\n        max_res=config[\"pf8\"][\"max_res\"]\n    )\n</code></pre> <p>First, open your raw file:</p> <pre><code>cbf_file=f\"{tutorial_path}/data/chipD_001_00111.cbf\"\ndata = fabio.open(cbf_file).data\n</code></pre> <p>Indicate the geometry filename that describes the initial detector geometry according to CrystFEL:</p> <pre><code>geometry_filename=f\"{tutorial_path}/geoms/pilatus6M.geom\"\n</code></pre> <p>If you want to check and have a look how the data looks like:</p> <pre><code>hdf5_file=f\"{tutorial_path}/masks/mask_chipD_001_00111.h5\"\nf = h5py.File(hdf5_file, \"r\")\nmask = np.array(f[\"data/data\"])\nf.close()\n</code></pre> <pre><code>plt.close()\n%matplotlib widget\nplt.imshow(data*mask, vmin=0,vmax=10)\nplt.show()\n</code></pre>          Figure"},{"location":"tutorial/center_of_mass/center_of_mass/#set-detector-geometry","title":"Set detector geometry","text":"<pre><code>PF8Config.set_geometry_from_file(geometry_filename)\n</code></pre> <p>Visualize multi panels detector</p> <pre><code># Not the case here, so I am commenting this\n#data_visualize = geometry.DataVisualizer(pixel_maps=PF8Config.pixel_maps)\n#visual_data = data_visualize.visualize_data(data=data * mask)\n#plt.close()\n#%matplotlib widget\n#plt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <p>Visualize single panel detector</p> <pre><code>visual_data = visualize_single_panel(data*mask, PF8Config.transformation_matrix, PF8Config.ss_in_rows)\n</code></pre> <pre><code>plt.close()\n%matplotlib widget\nplt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <pre><code>&lt;matplotlib.image.AxesImage at 0x2aae63d0b100&gt;\n</code></pre>          Figure"},{"location":"tutorial/center_of_mass/center_of_mass/#run-the-centering","title":"Run the centering","text":"<p>Dictionaries config and PF8Config ready for centering:</p> <p>If you want to save intermediate steps plots, set the path as root_path/run_label/*/file_label_frame_index.png</p> <pre><code>plots_info={\n    \"file_name\": \"chip_D_111\",\n    \"folder_name\": \"fakp\",\n    \"root_path\": f\"{tutorial_path}\",\n    \"value_auto\": True,\n    \"axis_lim_auto\": True,\n    \"color_map\": \"viridis\"\n}\n</code></pre> <pre><code>center_of_mass_method = CenterOfMass(\n                        config=config, PF8Config=PF8Config, plots_info=plots_info\n                    )\n</code></pre> <pre><code>center_coordinates_from_center_of_mass = center_of_mass_method(\n                        data = data\n                    )\n</code></pre> <p>Print the final result:</p> <pre><code>center_coordinates_from_center_of_mass\n</code></pre> <pre><code>array([1250., 1338.])\n</code></pre> <pre><code>PF8Config.detector_center_from_geom\n</code></pre> <pre><code>[1252, 1349]\n</code></pre> <pre><code>beam_position_shift = [center_coordinates_from_center_of_mass[x] - PF8Config.detector_center_from_geom[x] for x in range(2)]\n</code></pre> <pre><code>detector_shift_in_mm = [np.round(-1 * x *1e3 / PF8Config.pixel_resolution, 4) for x in beam_position_shift]\n</code></pre> <pre><code>detector_shift_in_mm\n</code></pre> <pre><code>[0.344, 1.892]\n</code></pre>"},{"location":"tutorial/circle_detection/circle_detection/","title":"Circle detection","text":"<pre><code>import h5py\nimport hdf5plugin\nimport numpy as np\nimport fabio\nimport matplotlib.pyplot as plt\nimport om.lib.geometry as geometry\n\nfrom bblib.methods import CircleDetection\nfrom bblib.models import PF8Info, PF8\nfrom bblib.utils import visualize_single_panel\n</code></pre> <p>Set here the absolute path to bblib_tutorial</p> <pre><code>tutorial_path=\"/path/to/bblib_tutorial\"\n</code></pre> <p>You will need to set the tutorial_path on the mask_file parameter in the geometry files cointaned in the bblib_tutorial/geoms folder</p> <pre><code>config = {\n    \"plots_flag\": True,\n    \"pf8\": {\n        \"max_num_peaks\": 10000,\n        \"adc_threshold\": 10,\n        \"minimum_snr\": 5,\n        \"min_pixel_count\": 2,\n        \"max_pixel_count\": 200,\n        \"local_bg_radius\": 3,\n        \"min_res\": 0,\n        \"max_res\": 1200\n        },\n    \"offset\": {\n        \"x\": 0.5,\n        \"y\": 0.5\n        },\n    \"peak_region\":{\n        \"min\": 60,\n        \"max\": 80\n        },\n    \"canny\":{\n        \"sigma\": 3,\n        \"low_threshold\": 0.9,\n        \"high_threshold\": 0.99\n        },\n    \"bragg_peaks_positions_for_center_of_mass_calculation\": 0,\n    \"pixels_for_mask_of_bragg_peaks\": 2,\n    \"polarization\": {\n        \"apply_polarization_correction\":True,\n        \"axis\":\"x\",\n        \"value\":0.99\n        }\n}\n</code></pre> <pre><code>PF8Config=PF8Info(\n        max_num_peaks=config[\"pf8\"][\"max_num_peaks\"],\n        adc_threshold=config[\"pf8\"][\"adc_threshold\"],\n        minimum_snr=config[\"pf8\"][\"minimum_snr\"],\n        min_pixel_count=config[\"pf8\"][\"min_pixel_count\"],\n        max_pixel_count=config[\"pf8\"][\"max_pixel_count\"],\n        local_bg_radius=config[\"pf8\"][\"local_bg_radius\"],\n        min_res=config[\"pf8\"][\"min_res\"],\n        max_res=config[\"pf8\"][\"max_res\"]\n    )\n</code></pre> <p>First, open your raw file:</p> <pre><code>hdf5_file=f\"{tutorial_path}/data/lyso_test_data_000014.h5\"\nf = h5py.File(hdf5_file, \"r\")\ndata = np.array(f[\"entry/data/data\"][2], dtype=np.int32)\nf.close()\n</code></pre> <p>Indicate the geometry filename that describes the initial detector geometry according to CrystFEL:</p> <pre><code>geometry_filename=f\"{tutorial_path}/geoms/eiger500k.geom\"\n</code></pre> <p>If you want to check and have a look how the data looks like:</p> <pre><code>hdf5_file=f\"{tutorial_path}/masks/mask_lyso_test_data_000014.h5\"\nf = h5py.File(hdf5_file, \"r\")\nmask = np.array(f[\"data/data\"])\nf.close()\n</code></pre> <pre><code>plt.close()\n%matplotlib widget\nplt.imshow(data*mask, vmin=0,vmax=10)\nplt.show()\n</code></pre>          Figure"},{"location":"tutorial/circle_detection/circle_detection/#set-detector-geometry","title":"Set detector geometry","text":"<pre><code>PF8Config.set_geometry_from_file(geometry_filename)\n</code></pre> <p>Visualize multi panels detector</p> <pre><code># Not the case here, so I am commenting this\n#data_visualize = geometry.DataVisualizer(pixel_maps=PF8Config.pixel_maps)\n#visual_data = data_visualize.visualize_data(data=data * mask)\n#plt.close()\n#%matplotlib widget\n#plt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <p>Visualize single panel detector</p> <pre><code>visual_data = visualize_single_panel(data*mask, PF8Config.transformation_matrix, PF8Config.ss_in_rows)\n</code></pre> <pre><code>plt.close()\n%matplotlib widget\nplt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <pre><code>&lt;matplotlib.image.AxesImage at 0x2ad4a70695d0&gt;\n</code></pre>          Figure"},{"location":"tutorial/circle_detection/circle_detection/#run-the-centering","title":"Run the centering","text":"<p>Dictionaries config and PF8Config ready for centering:</p> <p>If you want to save intermediate steps plots, set the path as root_path/run_label/*/file_label_frame_index.png</p> <pre><code>plots_info={\n    \"file_name\": \"lyso_2\",\n    \"folder_name\": \"beam_sweeping_lyso\",\n    \"root_path\": f\"{tutorial_path}\",\n    \"value_auto\": True,\n    \"axis_lim_auto\": True,\n    \"color_map\": \"viridis\"\n}\n</code></pre> <pre><code>circle_detection_method = CircleDetection(\n                        config=config, PF8Config=PF8Config, plots_info=plots_info\n                    )\n</code></pre> <pre><code>center_coordinates_from_circle_detection = circle_detection_method(\n                        data = data\n                    )\n</code></pre> <p>Print the final result:</p> <pre><code>center_coordinates_from_circle_detection\n</code></pre> <pre><code>[401.5, 438.5]\n</code></pre> <pre><code>PF8Config.detector_center_from_geom\n</code></pre> <pre><code>[401, 370]\n</code></pre> <pre><code>beam_position_shift = [center_coordinates_from_circle_detection[x] - PF8Config.detector_center_from_geom[x] for x in range(2)]\n</code></pre> <pre><code>detector_shift_in_mm = [np.round(-1 * x *1e3 / PF8Config.pixel_resolution, 4) for x in beam_position_shift]\n</code></pre> <pre><code>detector_shift_in_mm\n</code></pre> <pre><code>[-0.0375, -5.1375]\n</code></pre>"},{"location":"tutorial/friedel_pairs/friedel_pairs/","title":"Friedel pairs","text":"<pre><code>import h5py\nimport hdf5plugin\nimport numpy as np\nimport fabio\nimport matplotlib.pyplot as plt\nimport om.lib.geometry as geometry\n\nfrom bblib.methods import FriedelPairs\nfrom bblib.models import PF8Info, PF8\nfrom bblib.utils import visualize_single_panel\n</code></pre> <p>Set here the absolute path to bblib_tutorial</p> <pre><code>tutorial_path=\"/path/to/bblib_tutorial\"\n</code></pre> <p>You will need to set the tutorial_path on the mask_file parameter in the geometry files cointaned in the bblib_tutorial/geoms folder</p> <pre><code>config = {\n    \"plots_flag\": True,\n    \"search_radius\": 4,\n    \"pf8\": {\n        \"max_num_peaks\": 10000,\n        \"adc_threshold\": 10,\n        \"minimum_snr\": 5,\n        \"min_pixel_count\": 2,\n        \"max_pixel_count\": 200,\n        \"local_bg_radius\": 3,\n        \"min_res\": 0,\n        \"max_res\": 1200\n        },\n    \"offset\": {\n        \"x\": 0.5,\n        \"y\": 0.5\n        },\n    \"polarization\": {\n        \"apply_polarization_correction\": True,\n        \"axis\":\"x\",\n        \"value\":0.99\n        }\n}\n</code></pre> <pre><code>PF8Config=PF8Info(\n        max_num_peaks=config[\"pf8\"][\"max_num_peaks\"],\n        adc_threshold=config[\"pf8\"][\"adc_threshold\"],\n        minimum_snr=config[\"pf8\"][\"minimum_snr\"],\n        min_pixel_count=config[\"pf8\"][\"min_pixel_count\"],\n        max_pixel_count=config[\"pf8\"][\"max_pixel_count\"],\n        local_bg_radius=config[\"pf8\"][\"local_bg_radius\"],\n        min_res=config[\"pf8\"][\"min_res\"],\n        max_res=config[\"pf8\"][\"max_res\"]\n    )\n</code></pre> <p>First, open your raw file:</p> <pre><code>hdf5_file=f\"{tutorial_path}/data/lyso_test_data_000014.h5\"\nf = h5py.File(hdf5_file, \"r\")\ndata = np.array(f[\"entry/data/data\"][2], dtype=np.int32)\nf.close()\n</code></pre> <p>Indicate the geometry filename that describes the initial detector geometry according to CrystFEL:</p> <pre><code>geometry_filename=f\"{tutorial_path}/geoms/eiger500k.geom\"\n</code></pre> <p>If you want to check and have a look how the data looks like:</p> <pre><code>hdf5_file=f\"{tutorial_path}/masks/mask_lyso_test_data_000014.h5\"\nf = h5py.File(hdf5_file, \"r\")\nmask = np.array(f[\"data/data\"])\nf.close()\n</code></pre> <pre><code>%matplotlib widget\nplt.imshow(data*mask, vmin=0,vmax=10)\nplt.show()\n</code></pre>          Figure"},{"location":"tutorial/friedel_pairs/friedel_pairs/#set-detector-geometry","title":"Set detector geometry","text":"<pre><code>PF8Config.set_geometry_from_file(geometry_filename)\n</code></pre> <p>Visualize multi panels detector</p> <pre><code># Not the case here, so I am commenting this\n#data_visualize = geometry.DataVisualizer(pixel_maps=PF8Config.pixel_maps)\n#visual_data = data_visualize.visualize_data(data=data * mask)\n#plt.close()\n#%matplotlib widget\n#plt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <p>Visualize single panel detector</p> <pre><code>visual_data = visualize_single_panel(data*mask, PF8Config.transformation_matrix, PF8Config.ss_in_rows)\n</code></pre> <pre><code>plt.close()\n%matplotlib widget\nplt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <pre><code>&lt;matplotlib.image.AxesImage at 0x2b8655675600&gt;\n</code></pre>          Figure"},{"location":"tutorial/friedel_pairs/friedel_pairs/#run-the-centering","title":"Run the centering","text":"<p>Dictionaries config and PF8Config ready for centering:</p> <p>For the FriedelPairs method an initial_guess need to be passed, set here the coordinates in x and y of the initial guess for the center after setting the detector geometry:</p> <pre><code>initial_guess=[402,440]\n</code></pre> <p>If you want to save intermediate steps plots, set the path as root_path/run_label/*/file_label_frame_index.png</p> <pre><code>plots_info={\n    \"file_name\": \"lyso_2\",\n    \"folder_name\": \"beam_sweeping_lyso\",\n    \"root_path\": f\"{tutorial_path}\",\n    \"value_auto\": True,\n    \"axis_lim_auto\": True,\n    \"color_map\": \"viridis\"\n}\n</code></pre> <pre><code>friedel_pairs_method = FriedelPairs(\n                        config=config, PF8Config=PF8Config, plots_info=plots_info\n                    )\n</code></pre> <pre><code>center_coordinates_from_friedel_pairs = friedel_pairs_method(\n                        data = data, initial_guess= initial_guess\n                    )\n</code></pre> <pre><code>--------------  Friedel pairs search --------------\nNumber of Friedel Pairs in frame: 1.0\nPairs list for analysis:\n[((-73.5, 188.5), (-74.5, 190.5)), ((74.5, -190.5), (73.5, -188.5))]\nFriedel pairs position before center correction in pixels:\n[(-73.5, 188.5), (74.5, -190.5)]\nCenter shift in x 0.5\nCenter shift in y -1.0\nFriedel pairs position after center correction in pixels:\n[(-74.0, 189.5), (74.0, -189.5)]\nAll reflections after center correction in pixels:\n[(-391.0, -146.5), (-358.0, 31.5), (-357.0, 7.5), (-355.0, -16.5), (-354.0, -40.5), (-352.0, 85.5), (-350.0, -202.5), (-336.0, 144.5), (-332.0, 158.5), (-330.0, -125.5), (-308.0, -283.5), (-287.0, -200.5), (-284.0, 20.5), (-281.0, 58.5), (-281.0, -26.5), (-277.0, -219.5), (-274.0, -59.5), (-269.0, -68.5), (-258.0, 145.5), (-258.0, -110.5), (-242.0, -137.5), (-241.0, 179.5), (-231.0, -156.5), (-221.0, -274.5), (-216.0, -21.5), (-206.0, 224.5), (-199.0, 39.5), (-196.0, -116.5), (-196.0, -196.5), (-186.0, 49.5), (-186.0, -34.5), (-184.0, 85.5), (-174.0, 255.5), (-171.0, -219.5), (-167.0, 119.5), (-165.0, 260.5), (-161.0, 217.5), (-154.0, 139.5), (-153.0, 99.5), (-152.0, -232.5), (-149.0, -67.5), (-142.0, 158.5), (-135.0, -125.5), (-131.0, 301.5), (-130.0, -133.5), (-129.0, -143.5), (-126.0, -332.5), (-120.0, 182.5), (-120.0, 126.5), (-111.0, 188.5), (-104.0, 109.5), (-102.0, 193.5), (-88.0, -24.5), (-87.0, -168.5), (-79.0, -211.5), (-74.0, 208.5), (-74.0, 189.5), (-73.0, 313.5), (-72.0, -172.5), (-65.0, 214.5), (-57.0, 219.5), (10.0, 360.5), (17.0, 328.5), (68.0, -189.5), (74.0, -189.5), (92.0, 176.5), (97.0, -45.5), (97.0, -108.5), (98.0, 223.5), (100.0, -183.5), (106.0, 125.5), (107.0, -87.5), (107.0, -422.5)]\n-- End --\n</code></pre> <p>Print the final result:</p> <pre><code>center_coordinates_from_friedel_pairs\n</code></pre> <pre><code>[403.0, 439.5]\n</code></pre> <pre><code>PF8Config.detector_center_from_geom\n</code></pre> <pre><code>[401, 370]\n</code></pre> <pre><code>beam_position_shift = [center_coordinates_from_friedel_pairs[x] - PF8Config.detector_center_from_geom[x] for x in range(2)]\n</code></pre> <pre><code>beam_position_shift\n</code></pre> <pre><code>[2.0, 69.5]\n</code></pre> <pre><code>detector_shift_in_mm = [np.round(-1 * x *1e3 / PF8Config.pixel_resolution, 4) for x in beam_position_shift]\n</code></pre> <pre><code>detector_shift_in_mm\n</code></pre> <pre><code>[-0.15, -5.2125]\n</code></pre>"},{"location":"tutorial/minimize_peak_fwhm/minimize_peak_fwhm/","title":"Minimize peak FWHM","text":"<pre><code>import h5py\nimport hdf5plugin\nimport numpy as np\nimport fabio\nimport matplotlib.pyplot as plt\nimport om.lib.geometry as geometry\n\nfrom bblib.methods import MinimizePeakFWHM\nfrom bblib.models import PF8Info, PF8\nfrom bblib.utils import visualize_single_panel\n</code></pre> <p>Set here the absolute path to bblib_tutorial</p> <pre><code>tutorial_path=\"/path/to/bblib_tutorial\"\n</code></pre> <p>You will need to set the tutorial_path on the mask_file parameter in the geometry files cointaned in the bblib_tutorial/geoms folder</p> <pre><code>config = {\n    \"plots_flag\": True,\n    \"pf8\": {\n        \"max_num_peaks\": 10000,\n        \"adc_threshold\": 10,\n        \"minimum_snr\": 5,\n        \"min_pixel_count\": 2,\n        \"max_pixel_count\": 200,\n        \"local_bg_radius\": 3,\n        \"min_res\": 0,\n        \"max_res\": 1200\n        },\n    \"offset\": {\n        \"x\": 0.5,\n        \"y\": 0.5\n        },\n    \"peak_region\":{\n        \"min\": 200,\n        \"max\": 400\n        },\n    \"bragg_peaks_positions_for_center_of_mass_calculation\": 0,\n    \"pixels_for_mask_of_bragg_peaks\": 2,\n    \"polarization\": {\n        \"apply_polarization_correction\":True,\n        \"axis\":\"x\",\n        \"value\":0.99\n        }\n}\n</code></pre> <pre><code>PF8Config=PF8Info(\n        max_num_peaks=config[\"pf8\"][\"max_num_peaks\"],\n        adc_threshold=config[\"pf8\"][\"adc_threshold\"],\n        minimum_snr=config[\"pf8\"][\"minimum_snr\"],\n        min_pixel_count=config[\"pf8\"][\"min_pixel_count\"],\n        max_pixel_count=config[\"pf8\"][\"max_pixel_count\"],\n        local_bg_radius=config[\"pf8\"][\"local_bg_radius\"],\n        min_res=config[\"pf8\"][\"min_res\"],\n        max_res=config[\"pf8\"][\"max_res\"]\n    )\n</code></pre> <p>First, open your raw file:</p> <pre><code>cbf_file=f\"{tutorial_path}/data/chipD_001_00111.cbf\"\ndata = fabio.open(cbf_file).data\n</code></pre> <p>Indicate the geometry filename that describes the initial detector geometry according to CrystFEL:</p> <pre><code>geometry_filename=f\"{tutorial_path}/geoms/pilatus6M.geom\"\n</code></pre> <p>If you want to check and have a look how the data looks like:</p> <pre><code>hdf5_file=f\"{tutorial_path}/masks/mask_chipD_001_00111.h5\"\nf = h5py.File(hdf5_file, \"r\")\nmask = np.array(f[\"data/data\"])\nf.close()\n</code></pre> <pre><code>plt.close()\n%matplotlib widget\nplt.imshow(data*mask, vmin=0,vmax=10)\nplt.show()\n</code></pre>          Figure"},{"location":"tutorial/minimize_peak_fwhm/minimize_peak_fwhm/#set-detector-geometry","title":"Set detector geometry","text":"<pre><code>PF8Config.set_geometry_from_file(geometry_filename)\n</code></pre> <p>Visualize multi panels detector</p> <pre><code># Not the case here, so I am commenting this\n#data_visualize = geometry.DataVisualizer(pixel_maps=PF8Config.pixel_maps)\n#visual_data = data_visualize.visualize_data(data=data * mask)\n#plt.close()\n#%matplotlib widget\n#plt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <p>Visualize single panel detector</p> <pre><code>visual_data = visualize_single_panel(data*mask, PF8Config.transformation_matrix, PF8Config.ss_in_rows)\n</code></pre> <pre><code>plt.close()\n%matplotlib widget\nplt.imshow(visual_data, vmin=0, vmax=10, origin=\"lower\")\n</code></pre> <pre><code>&lt;matplotlib.image.AxesImage at 0x2ab4d9fd07c0&gt;\n</code></pre>          Figure"},{"location":"tutorial/minimize_peak_fwhm/minimize_peak_fwhm/#run-the-centering","title":"Run the centering","text":"<p>Dictionaries config and PF8Config ready for centering:</p> <p>For the MinimizePeakFWHM method an initial_guess need to be passed, set here the coordinates in x and y of the initial guess for the center after setting the detector geometry:</p> <pre><code>initial_guess=[1255,1355]\n</code></pre> <p>If you want to save intermediate steps plots, set the path as root_path/run_label/*/file_label_frame_index.png</p> <pre><code>plots_info={\n    \"file_name\": \"chip_D_111\",\n    \"folder_name\": \"fakp\",\n    \"root_path\": f\"{tutorial_path}\",\n    \"value_auto\": True,\n    \"axis_lim_auto\": True,\n    \"color_map\": \"viridis\"\n}\n</code></pre> <pre><code>minimize_peak_fwhm_method = MinimizePeakFWHM(\n                        config=config, PF8Config=PF8Config, plots_info=plots_info\n                    )\n</code></pre> <p>Warning</p> <p>Method not optmized, computationally yet, this might take a while. In the future, it might have a better version for this method</p> <pre><code>center_coordinates_from_minimize_peak_fwhm = minimize_peak_fwhm_method(\n                        data = data, initial_guess=initial_guess\n                    )\n</code></pre> <p>Print the final result:</p> <pre><code>center_coordinates_from_minimize_peak_fwhm\n</code></pre> <pre><code>[1249.5, 1372.5]\n</code></pre> <pre><code>PF8Config.detector_center_from_geom\n</code></pre> <pre><code>[1252, 1349]\n</code></pre> <pre><code>beam_position_shift = [center_coordinates_from_minimize_peak_fwhm[x] - PF8Config.detector_center_from_geom[x] for x in range(2)]\n</code></pre> <pre><code>detector_shift_in_mm = [np.round(-1 * x *1e3 / PF8Config.pixel_resolution, 4) for x in beam_position_shift]\n</code></pre> <pre><code>detector_shift_in_mm\n</code></pre> <pre><code>[0.43, -4.042]\n</code></pre>"}]}